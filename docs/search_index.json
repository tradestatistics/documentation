[
["index.html", "Open Trade Statistics Documentation Section 1 About", " Open Trade Statistics Documentation Pachá (Mauricio Vargas Sepúlveda) 2019-02-26 Section 1 About This documentation is a hard attempt to try to explain how to use the scripts created to process the data available from Open Trade Statistics and how to use our API. We made all the scripts available under the Trade Statistics Organization. "],
["data-sources.html", "Section 2 Data Sources", " Section 2 Data Sources All of the product data shown on the OTS site is classified using either SITC (Standard International Trade Classification) or HS (Harmonized System), the raw data was obtained from UN COMTRADE and its under their authorization that we share claned versions of the original raw datasets. "],
["data-availability.html", "Section 3 Data Availability 3.1 Yearly data", " Section 3 Data Availability We covered different periods of years according to the data availability. 3.1 Yearly data Classification Availability HS rev 1992 1992 – 2017 HS rev 1996 1996 – 2017 HS rev 2002 2002 – 2017 HS rev 2007 2007 – 2017 SITC rev 1 1962 – 2017 SITC rev 2 1976 – 2017 These datasets were used all together in order to create a unified data series for the period 1962-2017 with all products classified under HS rev 2007. "],
["data-processing.html", "Section 4 Data Processing 4.1 Tidy Data 4.2 Filling gaps in our data 4.3 GitHub repositories 4.4 Software information 4.5 Hardware information 4.6 Reproducibility notes 4.7 Coding style and performant code", " Section 4 Data Processing 4.1 Tidy Data We followed Tidy Data principles exposed in [1] and [2]. Those principles are closely tied to those of relational databases and Codd’s relational algebra. Figure 4.1: Data pipeline 4.2 Filling gaps in our data We use mirrored flows to cover gaps in raw data. Some countries report zero exports for some products, but we can inspect what their trade partners reported. If country A reported zero exports (imports) of product B to (from) country C, then we searched what country C reported of imports (exports) of product B from (to) country A. Exports are reported FOB (free on board) while imports are reported CIF (cost, insurance and freight). When country A sends products to country C that will be registered with a larger value when it arrives to destination because the importer is including cost, insurance and freight that was not registered before shipping. There are different approaches to solve this difficulty, and in particular [3], [4] and [5] discuss this in detail and propose that an 8% CIF/FOB ratio is suitable to discount costs and compare imports and exports. There are some noble and remarkable approaches such as gravitational models. As, to our knowledge at the moment, there is no literature reporting the estimation of a gravity equation for this purpose that returns a satisfactory fitting. Let \\(x_{c,c&#39;,p}\\) represent the exports of country \\(c\\) to country \\(c&#39;\\) in product \\(p\\) and \\(m_{c&#39;,c,p}\\) the imports of country \\(c&#39;\\) from country \\(c\\). Under this notation we defined corrected flows as: \\[\\hat{x}_{c,c&#39;,p} = \\max\\left\\{x_{c,c&#39;,p}, \\frac{m_{c&#39;,c,p}}{1.08}\\right\\}\\] \\[\\hat{m}_{c,c&#39;,p} = \\max\\left\\{x_{c&#39;,c,p}, \\frac{m_{c,c&#39;,p}}{1.08}\\right\\}\\] After symmetrization all observations are rounded to zero decimals. 4.2.1 Required packages and objects # Packages ---------------------------------------------------------------- library(data.table) library(dplyr) library(stringr) library(purrr) library(janitor) # Custom functions to read data ------------------------------------------- fread2 &lt;- function(file, select = NULL, character = NULL, numeric = NULL) { if(str_sub(file, start = -2) == &quot;gz&quot;) { d &lt;- fread( cmd = paste(&quot;zcat&quot;, file), select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } else { d &lt;- fread( input = file, select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } return(d) } # CIF-FOB rate ------------------------------------------------------------ # See Anderson &amp; van Wincoop, 2004, Hummels, 2006 and Gaulier &amp; Zignago, 2010 about 8% rate consistency cif_fob_rate &lt;- 1.08 # Commodity codes length -------------------------------------------------- J &lt;- c(4,6) # ISO-3 codes ------------------------------------------------------------- load(&quot;../comtrade-codes/01-2-tidy-country-data/country-codes.RData&quot;) country_codes &lt;- country_codes %&gt;% select(iso3_digit_alpha) %&gt;% mutate(iso3_digit_alpha = str_to_lower(iso3_digit_alpha)) %&gt;% filter(!iso3_digit_alpha %in% c(&quot;wld&quot;,&quot;null&quot;)) %&gt;% as_vector() # Five reporters rda file ------------------------------------------------ rda_file &lt;- &quot;five_reporters_data.rda&quot; 4.2.2 Read raw data # Read data --------------------------------------------------------------- if (!file.exists(rda_file)) { raw_data &lt;- fread2( &quot;../yearly-datasets/01-raw-data/hs-rev2007/gz/type-C_r-ALL_ps-2016_freq-A_px-H3_pub-20180612_fmt-csv_ex-20180705.csv.gz&quot;, select = c(&quot;Year&quot;, &quot;Aggregate Level&quot;, &quot;Trade Flow&quot;, &quot;Reporter ISO&quot;, &quot;Partner ISO&quot;, &quot;Commodity Code&quot;, &quot;Trade Value (US$)&quot;), character = &quot;Commodity Code&quot;, numeric = &quot;Trade Value (US$)&quot; ) raw_data } ## # A tibble: 25,790,743 x 7 ## year aggregate_level trade_flow reporter_iso partner_iso commodity_code ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2016 2 Import ALB WLD 01 ## 2 2016 2 Export ALB WLD 01 ## 3 2016 2 Import ALB AUT 01 ## 4 2016 2 Import ALB BGR 01 ## 5 2016 2 Import ALB GRC 01 ## 6 2016 2 Import ALB HUN 01 ## 7 2016 2 Import ALB ITA 01 ## 8 2016 2 Export ALB ITA 01 ## 9 2016 2 Import ALB ROU 01 ## 10 2016 2 Export ALB SRB 01 ## # … with 25,790,733 more rows, and 1 more variable: trade_value_us &lt;dbl&gt; 4.2.3 Clean data # Clean data -------------------------------------------------------------- if (!file.exists(rda_file)) { clean_data &lt;- raw_data %&gt;% rename(trade_value_usd = trade_value_us) %&gt;% filter(aggregate_level %in% J) %&gt;% filter(trade_flow %in% c(&quot;Export&quot;,&quot;Import&quot;)) %&gt;% filter( !is.na(commodity_code), commodity_code != &quot;&quot;, commodity_code != &quot; &quot; ) %&gt;% mutate( reporter_iso = str_to_lower(reporter_iso), partner_iso = str_to_lower(partner_iso) ) %&gt;% filter( reporter_iso %in% country_codes, partner_iso %in% country_codes ) %&gt;% # Provided Comtrade data cannot be redistributed, I&#39;ll limit the # example to five reporters filter( reporter_iso == &quot;chl&quot;, partner_iso %in% c(&quot;arg&quot;, &quot;bra&quot;, &quot;per&quot;, &quot;usa&quot;) ) save(clean_data, file = rda_file, compress = &quot;xz&quot;) clean_data } else { load(rda_file) clean_data } ## # A tibble: 22,517 x 7 ## year aggregate_level trade_flow reporter_iso partner_iso commodity_code ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2016 4 Import chl arg 0101 ## 2 2016 4 Export chl arg 0101 ## 3 2016 4 Import chl bra 0101 ## 4 2016 4 Export chl per 0101 ## 5 2016 4 Import chl usa 0101 ## 6 2016 4 Export chl usa 0101 ## 7 2016 6 Import chl arg 010110 ## 8 2016 6 Export chl arg 010110 ## 9 2016 6 Import chl bra 010110 ## 10 2016 6 Export chl per 010110 ## # … with 22,507 more rows, and 1 more variable: trade_value_usd &lt;dbl&gt; 4.2.4 Symmetric (clean) data # Exports data ------------------------------------------------------------ exports &lt;- clean_data %&gt;% filter(trade_flow == &quot;Export&quot;) %&gt;% select(reporter_iso, partner_iso, commodity_code, trade_value_usd) %&gt;% mutate(trade_value_usd = ceiling(trade_value_usd)) exports_mirrored &lt;- clean_data %&gt;% filter(trade_flow == &quot;Import&quot;) %&gt;% select(reporter_iso, partner_iso, commodity_code, trade_value_usd) %&gt;% mutate(trade_value_usd = ceiling(trade_value_usd / cif_fob_rate)) # Reporter and Partner must be inverted colnames(exports_mirrored) &lt;- c(&quot;partner_iso&quot;, &quot;reporter_iso&quot;, &quot;commodity_code&quot;, &quot;trade_value_usd&quot;) exports_model &lt;- exports %&gt;% full_join(exports_mirrored, by = c(&quot;reporter_iso&quot;, &quot;partner_iso&quot;, &quot;commodity_code&quot;)) %&gt;% rowwise() %&gt;% mutate(trade_value_usd = max(trade_value_usd.x, trade_value_usd.y, na.rm = T)) %&gt;% ungroup() %&gt;% mutate(commodity_code_parent = str_sub(commodity_code, 1, 4)) %&gt;% group_by(reporter_iso, partner_iso, commodity_code_parent) %&gt;% mutate(parent_count = n()) %&gt;% ungroup() %&gt;% select(reporter_iso, partner_iso, commodity_code, commodity_code_parent, parent_count, trade_value_usd) exports_model_unrepeated_parent &lt;- exports_model %&gt;% filter(parent_count == 1) exports_model_repeated_parent &lt;- exports_model %&gt;% filter( parent_count &gt; 1, str_length(commodity_code) %in% c(5,6) ) exports_model_repeated_parent_summary &lt;- exports_model_repeated_parent %&gt;% group_by(reporter_iso, partner_iso, commodity_code_parent) %&gt;% summarise(trade_value_usd = sum(trade_value_usd, na.rm = T)) %&gt;% ungroup() %&gt;% rename(commodity_code = commodity_code_parent) exports_model &lt;- exports_model_unrepeated_parent %&gt;% bind_rows(exports_model_repeated_parent) %&gt;% bind_rows(exports_model_repeated_parent_summary) %&gt;% arrange(reporter_iso, partner_iso, commodity_code) %&gt;% mutate( year = 2016, commodity_code_length = str_length(commodity_code) ) %&gt;% select(year, reporter_iso, partner_iso, commodity_code, commodity_code_length, trade_value_usd) %&gt;% filter(trade_value_usd &gt; 0) exports_model ## # A tibble: 22,484 x 6 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2016 arg chl 0101 4 ## 2 2016 arg chl 010110 6 ## 3 2016 arg chl 010190 6 ## 4 2016 arg chl 0106 4 ## 5 2016 arg chl 010619 6 ## 6 2016 arg chl 0201 4 ## 7 2016 arg chl 020130 6 ## 8 2016 arg chl 0202 4 ## 9 2016 arg chl 020230 6 ## 10 2016 arg chl 0206 4 ## # … with 22,474 more rows, and 1 more variable: trade_value_usd &lt;dbl&gt; 4.3 GitHub repositories Getting and cleaning data from UN COMTRADE (OTS Yearly Data) Scraping data from The Atlas of Economic Complexity (OTS Atlas Data) Product and country codes (OTS Comtrade Codes) R packages library for reproducibility (OTS Packrat Library) 4.4 Software information We used R 3.4.3 and RStudio Desktop 1.1 on Ubuntu Desktop 18.04. We built R from binaries in order to obtain a setup linked with multi-threaded numeric libraries. Our build is linked to OpenBLAS which we used over alternatives such as Intel MKL, BLAS or ATLAS that can also be used. If you use Windows the scripts will only use a single core because we used a parallelization that depends on fork system call that is only supported on Unix systems. You can always run the scripts on Windows and the only difference will be that it will use less RAM and it will be slower to compute. Also, before running the scripts on Windows verify that you installed GNU Utilities beforehand. One easy option is to install Chocolatey first and then install the GNU Utilities by running choco install unxutils on Cmd or Power Shell as administrator. 4.5 Hardware information All the data processing was done by using a Lenovo Thinkpad L380 that features an Intel i5-8250U 1.60 GHz processor and 32 GB (two DDR4 cards of sixteen gigabytes each). The functions are executed using parallelization on four cores because empirically we detected and overhead due to data communication with the cores when using more cores. Please notice that running our scripts with parallelization demands more RAM than the amount you can find on an average laptop. You can always disable parallelization in the scripts or reduce the default number of cores. 4.6 Reproducibility notes To guarantee reproducibility we provide Packrat snapshot and bundles. This prevents changes in syntax, functions or dependencies. Our R installation is isolated from apt-get to avoid any accidental updates that can alter the data pipeline and/or the output. The projects are related to each other. In order to avoid multiple copies of files some projects read files from other projects. For example, OTS Yearly Datasets input is the output of OTS Atlas Data. The only reproducibility flaw of this project lies in data downloading. Obtaining raw datasets from UN COMTRADE demands an API key that can only be obtained with institutional access that is limited to some universities and institutes. 4.7 Coding style and performant code We used the Tidyverse Style Guide. As cornerstone references for performant code we followed [6] and [7]. Some matrix operations are written in Rcpp to take advantage of C++ speed. To take full advantage of hardware and numerical libraries we am using sparse matrices as it is explained in [8]. References "],
["the-mathematics-of-economic-complexity.html", "Section 5 The Mathematics of Economic Complexity 5.1 Revealed Comparative Advantage (RCA) 5.2 Smooth Revealed Comparative Advantage (SRCA) 5.3 Diversity and Ubiquity 5.4 Reflections Method 5.5 Economic Complexity Index (ECI) 5.6 Product Complexity Index (PCI) 5.7 Countries not included in rankings and indicators 5.8 Product Proximity 5.9 Country Proximity 5.10 Product Density 5.11 Country Density", " Section 5 The Mathematics of Economic Complexity This section is adapted from [9] but it differs at some points. In particular [10] and [11] provide useful technical details. Our changes here consisted in expressing most of the original equations in terms of matrix and vectors. This is because if you use statistical software such as R, it’s more efficient to use linear algebra instead of other operations. 5.1 Revealed Comparative Advantage (RCA) When associating countries to products it is important to take into account the size of the export volume of countries and that of the world trade of products. This is because, even for the same product, we expect the volume of exports of a large country like China, to be larger than the volume of exports of a small country like Uruguay. By the same, we expect the export volume of products that represent a large fraction of world trade, such as cars or footwear, to represent a larger share of a country’s exports than products that account for a small fraction of world trade, like cotton seed oil or potato flour. To make countries and products comparable we use Balassa’s definition of Revealed Comparative Advantage (RCA). Balassa’s definition says that a country has revealed Comparative advantage in a product if it exports more than its “fair” share, that is, a share that is equal to the share of total world trade that the product represents. For example, in 2008, with exports of $42 billion, soybeans represented 0.35% of world trade. Of this total, Brazil exported nearly $11 billion, and since Brazil’s total exports for that year were $140 billion, soybeans accounted for 7.8% of Brazil’s exports. This represents around 21 times Brazil’s “fair share” of soybean exports (7.8% divided by 0.35%), so we can say that Brazil has revealed comparative advantage in soybeans. Let \\(\\hat{x}_{c,p}\\) represent the exports of country \\(c\\) in product \\(p\\), just as it was defined in 2, we can express the Revealed Comparative Advantage that country \\(c\\) has in product \\(p\\) as: \\[\\begin{equation} \\renewcommand{\\vec}[1]{\\boldsymbol{#1}} \\newcommand{\\R}{\\mathbb{R}} \\tag{5.1} RCA_{c,p} = \\frac{\\hat{x}_{c,p}}{\\sum_c \\hat{x}_{c,p}} / \\frac{\\sum_p \\hat{x}_{c,p}}{\\sum_{c}\\sum_{p} \\hat{x}_{c,p}} \\end{equation}\\] 5.2 Smooth Revealed Comparative Advantage (SRCA) We smoothed changes in export volumes induced by the price fluctuation of commodities by using a modification of (5.1) in which \\(x_{c,p}\\) is averaged over the previous three years by using weights: \\[ SRCA_{c,p}^{(t)} = \\frac{\\tilde{x}_{c,p}^{(t)}}{\\sum_c \\tilde{x}_{c,p}^{(t)}} / \\frac{\\sum_p \\tilde{x}_{c,p}^{(t)}}{\\sum_{c}\\sum_{p} \\tilde{x}_{c,p}^{(t)}} \\] Where \\[ \\tilde{x}_{c,p}^{(t)} = \\frac{2\\hat{x}_{c,p}^{(t)} + \\hat{x}_{c,p}^{(t-1)} + \\hat{x}_{c,p}^{(t-2)}}{4} \\] Consider that for some years this needs to be altered. As an example, for 1962 the SRCA is the same as RCA and for 1963 the \\(x_{c,p}^{(t-3)}\\) part is omitted and the denominator is changed to 2. With this measure we constructed a matrix that connects each country to the products that it makes. The entries in the matrix are 1 if country \\(c\\) exports product \\(p\\) with Revealed Comparative Advantage larger than 1, and 0 otherwise. The matrix \\(S \\in \\mathbb{R}^{C\\times P}\\) has entries defined as: \\[\\begin{equation} \\tag{5.2} s_{c,p} = \\begin{cases}1 &amp; \\text{ if } SRCA_{c,p}^{(t)} \\geq 1\\cr 0 &amp; \\text{ otherwise} \\end{cases} \\end{equation}\\] \\(S\\) is the matrix summarizing which country makes what, and is used to construct the product space and our measures of economic complexity for countries and products. In order to compute some of the equations exposed here we had to reduce \\(S\\) by removing cols and rows where each entry is zero. For some years the number of countries \\(C\\) can be less than 128 as it was exposed in 4. The number of products \\(P\\) for a given year can also experience a small decrease. It is also important that beyond computability some products were intensively exported in past decades but then they were replaced by other products. Think of floppy disks exports or saltpeter exports to figure out the dynamic of this matrix over time. 5.3 Diversity and Ubiquity With \\(S\\) defined as in the previous sections, we can measure Diversity and Ubiquity simply by summing over the rows or columns of that matrix. Diversity is defined as: \\[k_{c}^{(0)} = \\sum_p s_{c,p}\\] And Ubiquity as: \\[k_{p}^{(0)} = \\sum_c s_{c,p}\\] 5.4 Reflections Method To generate a more accurate measure of the number of capabilities available in a country, or required by a product, we need to correct the information that diversity and ubiquity carry by using each one to correct the other. For countries, this is to calculate the average ubiquity of the products that it exports, the average diversity of the countries that make those products and so forth. For products, this is to calculate the average diversity of the countries that make them and the average ubiquity of the other products that these countries make. This can be expressed by the recursion: \\[\\begin{equation} \\tag{5.3} k_{c}^{(n)} = \\frac{1}{k_{c}^{(0)}} \\sum_p s_{c,p} k_{p}^{(n-1)} \\end{equation}\\] \\[\\begin{equation} \\tag{5.4} k_{p}^{(n)} = \\frac{1}{k_{p}^{(0)}} \\sum_c s_{c,p} k_{c}^{(n-1)} \\end{equation}\\] Then we insert (5.4) into (5.3) to obtain: \\[\\begin{equation} \\tag{5.5} k_{c}^{(n)} = \\sum_c \\left[\\frac{1}{k_{c}^{(0)}} \\sum_p s_{c,p} \\frac{1}{k_{p}^{(0)}} s_{c,p} \\right] k_{c}^{(n-2)} \\end{equation}\\] The equation above can be conveniently written as a matrix equation (this formulation takes some ideas from [10] and [11]): \\[\\begin{equation} \\tag{5.6} \\vec{k}^{(n)} = \\hat{S}\\vec{k}^{(n-2)} \\end{equation}\\] Where \\[\\begin{equation} \\tag{5.7} \\hat{s}_{c,c&#39;} = \\frac{1}{k_{c}^{(0)}} \\sum_p s_{c,p} \\frac{1}{k_{p}^{(0)}} s_{c,p} \\end{equation}\\] In a similar way we can define \\(\\tilde{S}\\) with entries: \\[\\begin{equation} \\tag{5.8} \\tilde{s}_{p,p&#39;} = \\frac{1}{k_{p}^{(0)}} \\sum_c s_{c,p} \\frac{1}{k_{c}^{(0)}} s_{c,p} \\end{equation}\\] Observe that (5.6) is satisfied when \\(k_{c}^{(n)} = k_{c}^{(n-2)} = 1\\). This is the eigenvector of \\(\\tilde{S}\\) which is associated with its largest eigenvalue. Since this eigenvector is a vector of ones, it is not informative. We look, instead, for the eigenvector associated with the second largest eigenvalue. This is the eigenvector that captures the largest amount of variance in the system and is our measure of Economic Complexity. In particular, the interpretation of the scores changes when considering odd or even iteration order \\(n\\), high-order iterations are difficult to interpret, and the process asymptotically converges to a trivial fixed point. For the analysis we used \\(n=19\\) to compute \\(k_c\\) and \\(n=20\\) to compute \\(k_p\\). 5.5 Economic Complexity Index (ECI) From the Reflections Method, we define the Economic Complexity Index (ECI) exactly as in [9], this is: \\[\\begin{equation} \\tag{5.9} ECI_c = \\frac{v_c - \\mu_{v}}{\\sigma_{v}} \\end{equation}\\] Where \\(\\vec{v}\\) is a vector whose coordinates are given by \\(k_{c}^{(19)}\\) where \\(p \\in 1,\\ldots,C\\) \\(\\mu_v = \\sum_c v_c / C\\) (mean of \\(\\vec{v}\\)) \\(\\sigma_v = \\sqrt{\\sum_c (v_c - \\mu_v)^2 / (C - 1)}\\) (standard deviation of \\(\\vec{v}\\)) 5.6 Product Complexity Index (PCI) Similar to the Economic Complexity Index (ECI), we define a Product Complexity Index (PCI). Because of the symmetry of the problem, this can be done simply by exchanging the index of countries \\(c\\) with that for products \\(p\\) in the definitions above. We define PCI as: \\[\\begin{equation} \\tag{5.10} PCI_p = \\frac{w_p - \\mu_{w}}{\\sigma_{w}} \\end{equation}\\] Where \\(\\vec{w}\\) is a vector whose coordinates are given by \\(k_{p}^{(20)}\\) where \\(p \\in 1,\\ldots,P\\) \\(\\mu_w = \\sum_p w_p / P\\) (mean of \\(\\vec{w}\\)) \\(\\sigma_w = \\sqrt{\\sum_p (w_p - \\mu_w)^2 / (P - 1)}\\) (standard deviation of \\(\\vec{w}\\)) 5.7 Countries not included in rankings and indicators The curated data includes all the countries available from UN Comtrade data. However, RCA based calculations such as ECI, PCI, Proximity and Density explained in Chapter 5 consider 128 countries that account for 99% of world trade, 97% of the world’s total GDP and 95% of the world’s population according to [9]. We considered simultaneously: Countries with population greater or equal to 1.2 million Countries whose traded value is greater or equal than 1 billion Figure 4.1: Schematic of the procedure used to determine the countries that were included in the Atlas The full list of included countries is available here. 5.8 Product Proximity To make products you need chunks of embedded knowledge which [9] calls capabilities. The capabilities needed to produce one good may or may not be useful in the production of other goods. Since we do not observe capabilities directly, we create a measure that infers the similarity between the capabilities required by a pair of goods by looking at the probability that they are coexported. To quantify this similarity we assume that if two goods share most of the requisite capabilities, the countries that export one will also export the other. Our measure is based on the conditional probability that a country that exports product \\(p\\) will also export product \\(p&#39;\\) (see figure). Since conditional probabilities are not symmetric we take the minimum of the probability of exporting product \\(p\\), given \\(p&#39;\\) and the reverse, to make the measure symmetric and more stringent. As an example, assume that in the year 2017, 20 countries exported X, 10 exported Y and 8 exported both. Then, the product proximity between X and Y is 8/20. For a pair of goods \\(p\\) and \\(p&#39;\\) we define Product Proximity \\(\\Phi \\in \\mathbb{R}^{P\\times P}\\) as: \\[ \\Phi = (S^t S) \\odot U \\] Where \\(\\odot\\) denotes element-wise multiplication and \\[u_{p,p&#39;} = 1 / \\max(k_{p}^{(0)}, k_{p&#39;}^{(0)})\\] In other terms, each entry of \\(\\Phi\\) corresponds to: \\[ \\phi_{p,p&#39;} = \\frac{\\sum_c s_{c,p} s_{c,p&#39;}}{\\max(k_{p}^{(0)}, k_{p&#39;}^{(0)})} \\] Figure 5.1: An illustrative example for the product proximity measure 5.9 Country Proximity Similar to 5.9, we define Country Proximity \\(\\Lambda \\in \\mathbb{R}^{C\\times C}\\) as: \\[ \\Lambda = (SS^t) \\odot D \\] Where \\[d_{c,c&#39;} = 1 / \\max(k_{c}^{(0)}, k_{c&#39;}^{(0)})\\] In other terms, each entry of \\(\\Lambda\\) corresponds to: \\[ \\lambda_{c,c&#39;} = \\frac{\\sum_p s_{c,p} s_{c,p&#39;}}{\\max(k_{c}^{(0)}, k_{c&#39;}^{(0)})} \\] 5.10 Product Density Product Density, as introduced in [12], is the weighted mean proximity of a new potential product \\(p\\) to a country’s current productive capability. In formal terms this is the matrix \\(\\Psi \\in \\mathbb{R}^{C\\times P}\\) defined by: \\[ \\Psi = (S\\Phi) \\oslash (\\tilde{S}\\Phi) \\] Where \\(\\tilde{s}_{c,p} = 1\\) and \\(\\oslash\\) denotes element-wise division. In other terms, each entry of \\(\\Psi\\) corresponds to: \\[ \\psi_{c,p} = \\frac{\\sum_{p} s_{c,p} \\phi_{p,p&#39;}}{\\sum_{p} \\phi_{p,p&#39;}} \\] 5.11 Country Density Similar to 5.10, we define Country Density as the matrix \\(\\Omega \\in \\mathbb{R}^{C\\times P}\\): \\[ \\Omega = (\\Lambda S) \\oslash (\\Lambda\\tilde{S}) \\] In other terms, each entry of \\(\\Omega\\) corresponds to: \\[ \\omega_{c,p} = \\frac{\\sum_{c} s_{c,p} \\phi_{c,c&#39;}}{\\sum_{c} \\phi_{c,c&#39;}} \\] References "],
["using-our-datasets.html", "Section 6 Using our datasets 6.1 Compressed data 6.2 API", " Section 6 Using our datasets 6.1 Compressed data There is a special consideration you should have with our datasets, and is that you should always read the trade values as a numeric column and the commodity codes as a character column. Different R packages, and statistical software in general, have includeded functions to autodetect column types. In our experience, that can read commodity codes as integers and that would ignore leading zeroes in commodity codes. The same applies to trade values that can be detected as integers after the program reads the first \\(n\\) rows, and that would lead to read large values incorrectly due to integer class maximum value of 2,147,483,647. As an example, let’s read 1962 data: # packages library(data.table) library(dplyr) library(stringr) library(janitor) # custom functions messageline &lt;- function() { message(rep(&quot;-&quot;, 60)) } fread2 &lt;- function(file, select = NULL, character = NULL, numeric = NULL) { messageline() message(&quot;function fread2&quot;) message(&quot;file: &quot;, file) if(str_sub(file, start = -2) == &quot;gz&quot;) { d &lt;- fread( cmd = paste(&quot;zcat&quot;, file), select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } else { d &lt;- fread( input = file, select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } return(d) } # download data url_1962 &lt;- &quot;https://tradestatistics.io/data/06-tables/hs-rev2007/1-yrpc/yrpc-1962.csv.gz&quot; gz_1962 &lt;- &quot;yrpc-2016.csv.gz&quot; if (!file.exists(gz_1962)) { try(download.file(url_1962, gz_1962)) } # read data data_1962 &lt;- fread2( &quot;yrpc-2016.csv.gz&quot;, character = &quot;commodity_code&quot;, numeric = c( &quot;export_value_usd&quot;, &quot;import_value_usd&quot;, &quot;export_value_usd_change_1_year&quot;, &quot;export_value_usd_change_5_years&quot;, &quot;export_value_usd_percentage_change_1_year&quot;, &quot;export_value_usd_percentage_change_5_years&quot;, &quot;import_value_usd_change_1_year&quot;, &quot;import_value_usd_change_5_years&quot;, &quot;import_value_usd_percentage_change_1_year&quot;, &quot;import_value_usd_percentage_change_5_years&quot; ) ) data_1962 ## # A tibble: 1,709,034 x 15 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 1962 afg aus 5702 4 ## 2 1962 afg aus 570210 6 ## 3 1962 afg aut 0501 4 ## 4 1962 afg aut 0504 4 ## 5 1962 afg aut 050400 6 ## 6 1962 afg aut 5702 4 ## 7 1962 afg aut 570210 6 ## 8 1962 afg bel 0501 4 ## 9 1962 afg bel 0504 4 ## 10 1962 afg bel 050400 6 ## # … with 1,709,024 more rows, and 10 more variables: ## # export_value_usd &lt;dbl&gt;, import_value_usd &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; 6.2 API By using the API you can obtain the same result as in section 6.1, but in a simpler way: library(jsonlite) data_1962 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=1962&amp;r=all&amp;p=all&amp;l=4&quot; )) data_1962 ## # A tibble: 911,002 x 7 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 1962 afg aus 3215 4 ## 2 1962 afg aus 4802 4 ## 3 1962 afg aus 5702 4 ## 4 1962 afg aus 6401 4 ## 5 1962 afg aus 7010 4 ## 6 1962 afg aus 7016 4 ## 7 1962 afg aus 8301 4 ## 8 1962 afg aus 9999 4 ## 9 1962 afg aut 0501 4 ## 10 1962 afg aut 0504 4 ## # … with 910,992 more rows, and 2 more variables: import_value_usd &lt;int&gt;, ## # export_value_usd &lt;int&gt; Because the API uses PostgreSQL queries that are converted to JSON, the columns are always read correctly with jsonlite R package. The last API call makes sense with respect to y, r and p, but l is a requiered parameter that will be detailed in the forthcoming “Data” subsection. 6.2.1 Metadata The advantage of the API over https download is that you can filter what to obtain and also access some additional tables: ## Countries (no filter) countries &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/countries&quot; )) ## Products (no filter) products &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/products&quot; )) countries ## # A tibble: 249 x 6 ## country_iso country_name_en… country_fullnam… continent_id continent ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 afg Afghanistan Afghanistan 1 Asia ## 2 alb Albania Albania 2 Europe ## 3 dza Algeria Algeria 3 Africa ## 4 asm American Samoa American Samoa 4 Oceania ## 5 and Andorra Andorra 2 Europe ## 6 ago Angola Angola 3 Africa ## 7 aia Anguilla Anguilla 5 Americas ## 8 atg Antigua and Bar… Antigua and Bar… 5 Americas ## 9 arg Argentina Argentina 5 Americas ## 10 arm Armenia Armenia 1 Asia ## # … with 239 more rows, and 1 more variable: eu28_member &lt;int&gt; products ## # A tibble: 6,373 x 4 ## commodity_code commodity_fullname_english group_code group_name ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0101 Horses, asses, mules and hinnies; … 01 Animals; … ## 2 010110 Horses, asses, mules and hinnies; … 01 Animals; … ## 3 010190 Horses, asses, mules and hinnies; … 01 Animals; … ## 4 0102 Bovine animals; live 01 Animals; … ## 5 010210 Bovine animals; live, pure-bred br… 01 Animals; … ## 6 010290 Bovine animals; live, other than p… 01 Animals; … ## 7 0103 Swine; live 01 Animals; … ## 8 010310 Swine; live, pure-bred breeding an… 01 Animals; … ## 9 010391 Swine; live, (other than pure-bred… 01 Animals; … ## 10 010392 Swine; live, (other than pure-bred… 01 Animals; … ## # … with 6,363 more rows Please notice that these tables include some aliases. countries includes some meta-codes, c-xx where xx must the first two letters of a continent and all, this is: alias meaning c-af Alias for all valid ISO codes in Africa c-am Alias for all valid ISO codes in the Americas c-as Alias for all valid ISO codes in Asia c-eu Alias for all valid ISO codes in Europe c-oc Alias for all valid ISO codes in Oceania all Alias for all valid ISO codes in the World products also includes some meta-codes, xx for the first two digits of a code and those digits are the product group and all, this is: alias meaning 01 Alias for all codes in the group Animals; live 02 Alias for all codes in the group Meat and edible meat offal 03 Alias for all codes in the group Fish and crustaceans, molluscs and other aquatic invertebrates 04 Alias for all codes in the group Dairy produce; birds’ eggs; natural honey; edible products of animal origin, not elsewhere specified or included 06 Alias for all codes in the group Trees and other plants, live; bulbs, roots and the like; cut flowers and ornamental foliage 05 Alias for all codes in the group Animal originated products; not elsewhere specified or included 07 Alias for all codes in the group Vegetables and certain roots and tubers; edible 29 Alias for all codes in the group Organic chemicals 08 Alias for all codes in the group Fruit and nuts, edible; peel of citrus fruit or melons 09 Alias for all codes in the group Coffee, tea, mate and spices 10 Alias for all codes in the group Cereals 11 Alias for all codes in the group Products of the milling industry; malt, starches, inulin, wheat gluten 12 Alias for all codes in the group Oil seeds and oleaginous fruits; miscellaneous grains, seeds and fruit, industrial or medicinal plants; straw and fodder 26 Alias for all codes in the group Ores, slag and ash 13 Alias for all codes in the group Lac; gums, resins and other vegetable saps and extracts 14 Alias for all codes in the group Vegetable plaiting materials; vegetable products not elsewhere specified or included 15 Alias for all codes in the group Animal or vegetable fats and oils and their cleavage products; prepared animal fats; animal or vegetable waxes 22 Alias for all codes in the group Beverages, spirits and vinegar 16 Alias for all codes in the group Meat, fish or crustaceans, molluscs or other aquatic invertebrates; preparations thereof 17 Alias for all codes in the group Sugars and sugar confectionery 18 Alias for all codes in the group Cocoa and cocoa preparations 19 Alias for all codes in the group Preparations of cereals, flour, starch or milk; pastrycooks’ products 20 Alias for all codes in the group Preparations of vegetables, fruit, nuts or other parts of plants 21 Alias for all codes in the group Miscellaneous edible preparations 23 Alias for all codes in the group Food industries, residues and wastes thereof; prepared animal fodder 24 Alias for all codes in the group Tobacco and manufactured tobacco substitutes 25 Alias for all codes in the group Salt; sulphur; earths, stone; plastering materials, lime and cement 27 Alias for all codes in the group Mineral fuels, mineral oils and products of their distillation; bituminous substances; mineral waxes 28 Alias for all codes in the group Inorganic chemicals; organic and inorganic compounds of precious metals; of rare earth metals, of radio-active elements and of isotopes 30 Alias for all codes in the group Pharmaceutical products 35 Alias for all codes in the group Albuminoidal substances; modified starches; glues; enzymes 31 Alias for all codes in the group Fertilizers 32 Alias for all codes in the group Tanning or dyeing extracts; tannins and their derivatives; dyes, pigments and other colouring matter; paints, varnishes; putty, other mastics; inks 39 Alias for all codes in the group Plastics and articles thereof 33 Alias for all codes in the group Essential oils and resinoids; perfumery, cosmetic or toilet preparations 34 Alias for all codes in the group Soap, organic surface-active agents; washing, lubricating, polishing or scouring preparations; artificial or prepared waxes, candles and similar articles, modelling pastes, dental waxes and dental preparations with a basis of plaster 36 Alias for all codes in the group Explosives; pyrotechnic products; matches; pyrophoric alloys; certain combustible preparations 37 Alias for all codes in the group Photographic or cinematographic goods 38 Alias for all codes in the group Chemical products n.e.c. 40 Alias for all codes in the group Rubber and articles thereof 44 Alias for all codes in the group Wood and articles of wood; wood charcoal 41 Alias for all codes in the group Raw hides and skins (other than furskins) and leather 70 Alias for all codes in the group Glass and glassware 42 Alias for all codes in the group Articles of leather; saddlery and harness; travel goods, handbags and similar containers; articles of animal gut (other than silk-worm gut) 43 Alias for all codes in the group Furskins and artificial fur; manufactures thereof 45 Alias for all codes in the group Cork and articles of cork 46 Alias for all codes in the group Manufactures of straw, esparto or other plaiting materials; basketware and wickerwork 47 Alias for all codes in the group Pulp of wood or other fibrous cellulosic material; recovered (waste and scrap) paper or paperboard 52 Alias for all codes in the group Cotton 48 Alias for all codes in the group Paper and paperboard; articles of paper pulp, of paper or paperboard 49 Alias for all codes in the group Printed books, newspapers, pictures and other products of the printing industry; manuscripts, typescripts and plans 50 Alias for all codes in the group Silk 51 Alias for all codes in the group Wool, fine or coarse animal hair; horsehair yarn and woven fabric 53 Alias for all codes in the group Vegetable textile fibres; paper yarn and woven fabrics of paper yarn 54 Alias for all codes in the group Man-made filaments; strip and the like of man-made textile materials 55 Alias for all codes in the group Man-made staple fibres 62 Alias for all codes in the group Apparel and clothing accessories; not knitted or crocheted 56 Alias for all codes in the group Wadding, felt and nonwovens, special yarns; twine, cordage, ropes and cables and articles thereof 57 Alias for all codes in the group Carpets and other textile floor coverings 58 Alias for all codes in the group Fabrics; special woven fabrics, tufted textile fabrics, lace, tapestries, trimmings, embroidery 59 Alias for all codes in the group Textile fabrics; impregnated, coated, covered or laminated; textile articles of a kind suitable for industrial use 60 Alias for all codes in the group Fabrics; knitted or crocheted 61 Alias for all codes in the group Apparel and clothing accessories; knitted or crocheted 95 Alias for all codes in the group Toys, games and sports requisites; parts and accessories thereof 63 Alias for all codes in the group Textiles, made up articles; sets; worn clothing and worn textile articles; rags 64 Alias for all codes in the group Footwear; gaiters and the like; parts of such articles 65 Alias for all codes in the group Headgear and parts thereof 66 Alias for all codes in the group Umbrellas, sun umbrellas, walking-sticks, seat sticks, whips, riding crops; and parts thereof 67 Alias for all codes in the group Feathers and down, prepared; and articles made of feather or of down; artificial flowers; articles of human hair 68 Alias for all codes in the group Stone, plaster, cement, asbestos, mica or similar materials; articles thereof 69 Alias for all codes in the group Ceramic products 71 Alias for all codes in the group Natural, cultured pearls; precious, semi-precious stones; precious metals, metals clad with precious metal, and articles thereof; imitation jewellery; coin 72 Alias for all codes in the group Iron and steel 73 Alias for all codes in the group Iron or steel articles 74 Alias for all codes in the group Copper and articles thereof 75 Alias for all codes in the group Nickel and articles thereof 76 Alias for all codes in the group Aluminium and articles thereof 81 Alias for all codes in the group Metals; n.e.c., cermets and articles thereof 78 Alias for all codes in the group Lead and articles thereof 79 Alias for all codes in the group Zinc and articles thereof 80 Alias for all codes in the group Tin; articles thereof 82 Alias for all codes in the group Tools, implements, cutlery, spoons and forks, of base metal; parts thereof, of base metal 83 Alias for all codes in the group Metal; miscellaneous products of base metal 84 Alias for all codes in the group Nuclear reactors, boilers, machinery and mechanical appliances; parts thereof 85 Alias for all codes in the group Electrical machinery and equipment and parts thereof; sound recorders and reproducers; television image and sound recorders and reproducers, parts and accessories of such articles 88 Alias for all codes in the group Aircraft, spacecraft and parts thereof 91 Alias for all codes in the group Clocks and watches and parts thereof 86 Alias for all codes in the group Railway, tramway locomotives, rolling-stock and parts thereof; railway or tramway track fixtures and fittings and parts thereof; mechanical (including electro-mechanical) traffic signalling equipment of all kinds 87 Alias for all codes in the group Vehicles; other than railway or tramway rolling stock, and parts and accessories thereof 89 Alias for all codes in the group Ships, boats and floating structures 90 Alias for all codes in the group Optical, photographic, cinematographic, measuring, checking, medical or surgical instruments and apparatus; parts and accessories 92 Alias for all codes in the group Musical instruments; parts and accessories of such articles 93 Alias for all codes in the group Arms and ammunition; parts and accessories thereof 94 Alias for all codes in the group Furniture; bedding, mattresses, mattress supports, cushions and similar stuffed furnishings; lamps and lighting fittings, n.e.c.; illuminated signs, illuminated name-plates and the like; prefabricated buildings 96 Alias for all codes in the group Miscellaneous manufactured articles 97 Alias for all codes in the group Works of art; collectors’ pieces and antiques 99 Alias for all codes in the group Commodities not specified according to kind all Alias for all codes 6.2.2 Data 6.2.2.1 General parameters The tables provided withing our API contain at least one of these fields: Year (y) Reporter ISO (r) Partner ISO (p) Commodity code (c) The most detailed table is yrpc that contains all bilateral flows at product level. With respect to y you can pass any integer contained in \\([1962,2017]\\). Both r and p accept any valid ISO code or alias contained in the countries table. For example, both chl (valid ISO code) and c-am (continent Americas, an alias) are valid API filtering parameters. c takes any valid commodity code or alias from the products. For example, both 0101 (valid HS product code) and 01 (valid HS group code) are valid API filtering parameters. In addition to y, r, p, c parameters, the length (l) parameter allows efficient queries provided our data contains both 4 and 6 digits long commodity codes. Because 4 digits code contain 6 digits codes, our approach is to allow the user to use l=4, l=6 or l=all to provide just the requested data. By default the API takes c = &quot;all&quot; and l = 4 as defaults. You can always skip c or l, but y, r and p are requiered to return data. 6.2.2.2 Available reporters The only applicable filter is by year. # Available reporters (filter by year) reporters &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/reporters?y=2015&quot; )) 6.2.2.3 Country rankings The only applicable filter is by year. # Country rankings (filter by year) country_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/country_rankings?y=2015&quot; )) 6.2.2.4 Product rankings The only applicable filter is by year. # Product rankings (filter by year) product_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/product_rankings?y=2015&quot; )) 6.2.2.5 Year - Reporter - Partner - Commodity You can filter by year, reporter and partner. # Year - Reporter - Partner - Commodity (filter by year, reporter and partner) ## filter by commodity length (parameter `l`) yrpc_1 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=2015&amp;r=chl&amp;p=arg&amp;l=4&quot; )) yrpc_1 ## # A tibble: 950 x 15 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2015 chl arg 0101 4 ## 2 2015 chl arg 0106 4 ## 3 2015 chl arg 0201 4 ## 4 2015 chl arg 0202 4 ## 5 2015 chl arg 0206 4 ## 6 2015 chl arg 0207 4 ## 7 2015 chl arg 0301 4 ## 8 2015 chl arg 0302 4 ## 9 2015 chl arg 0303 4 ## 10 2015 chl arg 0304 4 ## # … with 940 more rows, and 10 more variables: export_value_usd &lt;int&gt;, ## # import_value_usd &lt;int&gt;, export_value_usd_change_1_year &lt;int&gt;, ## # export_value_usd_change_5_years &lt;int&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;int&gt;, ## # import_value_usd_change_5_years &lt;int&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; ## filter by commodity group (parameter `c`) yrpc_2 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=2015&amp;r=chl&amp;p=arg&amp;c=01&quot; )) yrpc_2 ## # A tibble: 5 x 15 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2015 chl arg 0101 4 ## 2 2015 chl arg 010110 6 ## 3 2015 chl arg 010190 6 ## 4 2015 chl arg 0106 4 ## 5 2015 chl arg 010619 6 ## # … with 10 more variables: export_value_usd &lt;int&gt;, ## # import_value_usd &lt;int&gt;, export_value_usd_change_1_year &lt;int&gt;, ## # export_value_usd_change_5_years &lt;int&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;int&gt;, ## # import_value_usd_change_5_years &lt;int&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Some columns requiere an explanation: commodity_code: HS07 product codes (e.g. according to the table within this package, 0101 stands for “Horses, etc.”) commodity_code_length: How many digits does commodity_code contain, this can be useful to filter by depth when using HS codes (HS 6 digits is a more detailed version of HS 4 digits, and therefore you don’t have to sum both or you’ll be counting exports/imports twice) group_code: International categorization of group products defined after product ID group_name: English name corresponding to group_id export_value_usd: Exports measured in nominal United States Dollars (USD) import_value_usd: Imports measured in nominal United States Dollars (USD) export_value_usd_percentage_change_1_year: Nominal increase/decrease in exports measured as percentage with respect to last year export_value_usd_percentage_change_5_years: Nominal increase/decrease in exports measured as percentage with respect to five years ago export_value_usd_change_1_year: Nominal increase/decrease in exports measured in USD with respect to last year export_value_usd_change_5_years: Nominal increase/decrease in exports measured in USD with respect to five years ago 6.2.2.6 Year - Reporter - Commodity The only applicable filter is by year and reporter. # Year - Reporter - Commodity (filter by year and reporter) ## filter by reporter ISO (parameter `r`) yrc_1 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2015&amp;r=chl&amp;l=4&quot; )) yrc_1 ## # A tibble: 1,214 x 16 ## year reporter_iso commodity_code commodity_code_… export_value_usd ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2015 chl 0101 4 9958013 ## 2 2015 chl 0102 4 88938806 ## 3 2015 chl 0103 4 956016 ## 4 2015 chl 0104 4 NA ## 5 2015 chl 0105 4 NA ## 6 2015 chl 0106 4 5290017 ## 7 2015 chl 0201 4 7812764 ## 8 2015 chl 0202 4 25146882 ## 9 2015 chl 0203 4 402815596 ## 10 2015 chl 0204 4 32743522 ## # … with 1,204 more rows, and 11 more variables: import_value_usd &lt;dbl&gt;, ## # export_rca_4_digits_commodity_code &lt;dbl&gt;, ## # import_rca_4_digits_commodity_code &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; ## filter by reporter alias (also parameter `r`) yrc_2 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2015&amp;r=c-am&amp;l=4&quot; )) yrc_2 ## # A tibble: 47,807 x 16 ## year reporter_iso commodity_code commodity_code_… import_value_usd ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2015 aia 0101 4 12000 ## 2 2015 aia 0104 4 1481 ## 3 2015 aia 0105 4 44859 ## 4 2015 aia 0106 4 111 ## 5 2015 aia 0201 4 216873 ## 6 2015 aia 0202 4 514211 ## 7 2015 aia 0203 4 166264 ## 8 2015 aia 0204 4 57070 ## 9 2015 aia 0206 4 33427 ## 10 2015 aia 0207 4 1117503 ## # … with 47,797 more rows, and 11 more variables: ## # import_rca_4_digits_commodity_code &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # export_value_usd &lt;dbl&gt;, export_rca_4_digits_commodity_code &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt; Here the export_rca* and import_rca* fields contain the Revealed Comparative Advantage (RCA) of an exported product with respect to all the products with the same number of digits. The definition of RCA is detailed on Open Trade Statistics Documentation. 6.2.2.7 Year - Reporter - Partner The only applicable filter is by year, reporter and partner. # Year - Reporter - Partner (filter by year, reporter and partner) yrp &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrp?y=2015&amp;r=chl&amp;p=arg&quot; )) 6.2.2.8 Year - Commodity The only applicable filter is by year and commodity. # Year - Commodity (filter by year) yc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yc?y=2015&amp;c=0101&quot; )) Let’s explore the first rows of yr: yc ## # A tibble: 1 x 21 ## year commodity_code commodity_code_… export_value_usd import_value_usd ## &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 0101 4 3464828975 3464828975 ## # … with 16 more variables: pci_4_digits_commodity_code &lt;dbl&gt;, ## # pci_rank_4_digits_commodity_code &lt;int&gt;, ## # pci_rank_4_digits_commodity_code_delta_1_year &lt;int&gt;, ## # pci_rank_4_digits_commodity_code_delta_5_years &lt;int&gt;, ## # top_exporter_iso &lt;chr&gt;, top_exporter_trade_value_usd &lt;int&gt;, ## # top_importer_iso &lt;chr&gt;, top_importer_trade_value_usd &lt;int&gt;, ## # export_value_usd_change_1_year &lt;int&gt;, ## # export_value_usd_change_5_years &lt;int&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;int&gt;, ## # import_value_usd_change_5_years &lt;int&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Here some fields deserve an explanation: pci_4_digits_commodity_code: Product Complexity Index (PCI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits commodity codes. pci_6_digits_commodity_code: Similar to the previous field but built by using just six digits commodity codes. pci_rank_4_digits_commodity_code: The rank of a product given its PCI (e.g. the highest PCI obtains the #1) pci_rank_4_digits_commodity_code_delta_1_year: How many places a country increased or decreased with respect to last year 6.2.2.9 Year - Reporter The only applicable filter is by year and reporter. ## Year - Reporter (filter by year and reporter) yr &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yr?y=2015&amp;r=chl&quot; )) Let’s explore the first rows of yr: yr ## # A tibble: 1 x 20 ## year reporter_iso export_value_usd import_value_usd eci_4_digits_co… ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 chl 69696214027 73736894538 -0.221 ## # … with 15 more variables: eci_rank_4_digits_commodity_code &lt;int&gt;, ## # eci_rank_4_digits_commodity_code_delta_1_year &lt;int&gt;, ## # eci_rank_4_digits_commodity_code_delta_5_years &lt;int&gt;, ## # top_export_commodity_code &lt;chr&gt;, top_export_trade_value_usd &lt;dbl&gt;, ## # top_import_commodity_code &lt;chr&gt;, top_import_trade_value_usd &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Some fields here require more detail: eci_4_digits_commodity_code: Economic Complexity Index (ECI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits commodity codes. eci_rank_4_digits_commodity_code: The rank of a country given its ECI (e.g. the highest ECI obtains the #1) eci_rank_4_digits_commodity_code_delta_1_year: How many places a country increased or decreased with respect to last year "],
["references.html", "Section 7 References", " Section 7 References "]
]
