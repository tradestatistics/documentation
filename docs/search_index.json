[
["using-our-datasets.html", "Section 5 Using our datasets 5.1 Compressed data 5.2 API 5.3 R package", " Section 5 Using our datasets 5.1 Compressed data There is a special consideration you should have with our datasets, and is that you should always read the trade values as a numeric column and the commodity codes as a character column. Different R packages, and statistical software in general, have includeded functions to autodetect column types. In our experience, that can read commodity codes as integers and that would ignore leading zeroes in commodity codes. The same applies to trade values that can be detected as integers after the program reads the first \\(n\\) rows, and that would lead to read large values incorrectly due to integer class maximum value of 2,147,483,647. As an example, let’s read 1962 data: # packages library(data.table) library(dplyr) library(stringr) library(janitor) # custom functions messageline &lt;- function() { message(rep(&quot;-&quot;, 60)) } fread2 &lt;- function(file, select = NULL, character = NULL, numeric = NULL) { messageline() message(&quot;function fread2&quot;) message(&quot;file: &quot;, file) if(str_sub(file, start = -2) == &quot;gz&quot;) { d &lt;- fread( cmd = paste(&quot;zcat&quot;, file), select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } else { d &lt;- fread( input = file, select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } return(d) } # download data url_1962 &lt;- &quot;https://tradestatistics.io/data/06-tables/hs-rev2007/1-yrpc/yrpc-1962.csv.gz&quot; gz_1962 &lt;- &quot;yrpc-2016.csv.gz&quot; if (!file.exists(gz_1962)) { try(download.file(url_1962, gz_1962)) } # read data data_1962 &lt;- fread2( &quot;yrpc-2016.csv.gz&quot;, character = &quot;commodity_code&quot;, numeric = c( &quot;export_value_usd&quot;, &quot;import_value_usd&quot;, &quot;export_value_usd_change_1_year&quot;, &quot;export_value_usd_change_5_years&quot;, &quot;export_value_usd_percentage_change_1_year&quot;, &quot;export_value_usd_percentage_change_5_years&quot;, &quot;import_value_usd_change_1_year&quot;, &quot;import_value_usd_change_5_years&quot;, &quot;import_value_usd_percentage_change_1_year&quot;, &quot;import_value_usd_percentage_change_5_years&quot; ) ) data_1962 ## # A tibble: 1,709,034 x 15 ## year reporter_iso partner_iso commodity_code commodity_code_… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 1962 afg aus 5702 4 ## 2 1962 afg aus 570210 6 ## 3 1962 afg aut 0501 4 ## 4 1962 afg aut 0504 4 ## 5 1962 afg aut 050400 6 ## 6 1962 afg aut 5702 4 ## 7 1962 afg aut 570210 6 ## 8 1962 afg bel 0501 4 ## 9 1962 afg bel 0504 4 ## 10 1962 afg bel 050400 6 ## # ... with 1,709,024 more rows, and 10 more variables: ## # export_value_usd &lt;dbl&gt;, import_value_usd &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; 5.2 API By using the API you can obtain the same result as above, but in a simpler way: library(jsonlite) data_1962 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=1962&amp;r=all&amp;p=all&amp;l=4&quot; )) data_1962 ## # A tibble: 911,002 x 7 ## year reporter_iso partner_iso commodity_code commodity_code_… ## * &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 1962 afg aus 3215 4 ## 2 1962 afg aus 4802 4 ## 3 1962 afg aus 5702 4 ## 4 1962 afg aus 6401 4 ## 5 1962 afg aus 7010 4 ## 6 1962 afg aus 7016 4 ## 7 1962 afg aus 8301 4 ## 8 1962 afg aus 9999 4 ## 9 1962 afg aut 0501 4 ## 10 1962 afg aut 0504 4 ## # ... with 910,992 more rows, and 2 more variables: ## # import_value_usd &lt;int&gt;, export_value_usd &lt;int&gt; Because the API uses PostgreSQL queries that are converted to JSON, the columns are always read correctly with jsonlite R package. The last API call makes sense with respect to y, r and p, but l is a requiered parameter that will be detailed in the forthcoming “Data” subsection. 5.2.1 Metadata The advantage of the API over https download is that you can filter what to obtain and also access some additional tables: ## Countries (no filter) countries &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/countries&quot; )) ## Products (no filter) products &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/products&quot; )) countries ## # A tibble: 243 x 6 ## country_iso country_name_en… country_fullnam… continent_id continent ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 afg Afghanistan Afghanistan 1 Asia ## 2 alb Albania Albania 2 Europe ## 3 dza Algeria Algeria 3 Africa ## 4 asm American Samoa American Samoa 4 Oceania ## 5 and Andorra Andorra 2 Europe ## 6 ago Angola Angola 3 Africa ## 7 aia Anguilla Anguilla 5 Americas ## 8 atg Antigua and Bar… Antigua and Bar… 5 Americas ## 9 arg Argentina Argentina 5 Americas ## 10 arm Armenia Armenia 1 Asia ## # ... with 233 more rows, and 1 more variable: eu28_member &lt;int&gt; products ## # A tibble: 6,275 x 4 ## commodity_code product_fullname_english group_code group_name ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0101 Horses, asses, mules and hinnies;… 01 Animals; … ## 2 010110 Horses, asses, mules and hinnies;… 01 Animals; … ## 3 010190 Horses, asses, mules and hinnies;… 01 Animals; … ## 4 0102 Bovine animals; live 01 Animals; … ## 5 010210 Bovine animals; live, pure-bred b… 01 Animals; … ## 6 010290 Bovine animals; live, other than … 01 Animals; … ## 7 0103 Swine; live 01 Animals; … ## 8 010310 Swine; live, pure-bred breeding a… 01 Animals; … ## 9 010391 Swine; live, (other than pure-bre… 01 Animals; … ## 10 010392 Swine; live, (other than pure-bre… 01 Animals; … ## # ... with 6,265 more rows 5.2.2 Data 5.2.2.1 Available reporters The only applicable filter is by year. # Available reporters (filter by year) reporters &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/reporters?y=2015&quot; )) 5.2.2.2 Country rankings The only applicable filter is by year. # Country rankings (filter by year) country_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/country_rankings?y=2015&quot; )) 5.2.2.3 Product rankings The only applicable filter is by year. # Product rankings (filter by year) product_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/product_rankings?y=2015&quot; )) 5.2.2.4 Year - Reporter - Partner - Commodity You can filter by year, reporter and partner but not by commodity. The length (l) parameter allows efficient queries provided our data contains both 4 and 6 digits long commodity codes. Because 4 digits code contain 6 digits codes, our approach is to allow the user to use l=4, l=6 or l=all to provide just the requested data. # Year - Reporter - Partner - Commodity (filter by year, reporter and partner) yrpc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=2015&amp;r=chl&amp;p=arg&amp;l=4&quot; )) yrpc ## # A tibble: 950 x 15 ## year reporter_iso partner_iso commodity_code commodity_code_… ## * &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2015 chl arg 0101 4 ## 2 2015 chl arg 0106 4 ## 3 2015 chl arg 0201 4 ## 4 2015 chl arg 0202 4 ## 5 2015 chl arg 0206 4 ## 6 2015 chl arg 0207 4 ## 7 2015 chl arg 0301 4 ## 8 2015 chl arg 0302 4 ## 9 2015 chl arg 0303 4 ## 10 2015 chl arg 0304 4 ## # ... with 940 more rows, and 10 more variables: export_value_usd &lt;int&gt;, ## # import_value_usd &lt;int&gt;, export_value_usd_change_1_year &lt;int&gt;, ## # export_value_usd_change_5_years &lt;int&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;int&gt;, ## # import_value_usd_change_5_years &lt;int&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Some columns requiere an explanation: commodity_code: HS07 product codes (e.g. according to the table within this package, 0101 stands for “Horses, etc.”) commodity_code_length: How many digits does commodity_code contain, this can be useful to filter by depth when using HS codes (HS 6 digits is a more detailed version of HS 4 digits, and therefore you don’t have to sum both or you’ll be counting exports/imports twice) group_code: International categorization of group products defined after product ID group_name: English name corresponding to group_id export_value_usd: Exports measured in nominal United States Dollars (USD) import_value_usd: Imports measured in nominal United States Dollars (USD) export_value_usd_percentage_change_1_year: Nominal increase/decrease in exports measured as percentage with respect to last year export_value_usd_percentage_change_5_years: Nominal increase/decrease in exports measured as percentage with respect to five years ago export_value_usd_change_1_year: Nominal increase/decrease in exports measured in USD with respect to last year export_value_usd_change_5_years: Nominal increase/decrease in exports measured in USD with respect to five years ago 5.2.2.5 Year - Reporter - Commodity The only applicable filter is by year and reporter, but not by commodity. Exactly as yrpc from the subsections above, the l parameter is required. ## Year - Reporter - Commodity (filter by year and reporter) yrc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2015&amp;r=chl&amp;l=4&quot; )) Let’s explore the first rows of yrc: yrc ## # A tibble: 1,214 x 16 ## year reporter_iso commodity_code commodity_code_… export_value_usd ## * &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 2015 chl 0101 4 9958013 ## 2 2015 chl 0102 4 88938806 ## 3 2015 chl 0103 4 956016 ## 4 2015 chl 0104 4 NA ## 5 2015 chl 0105 4 NA ## 6 2015 chl 0106 4 5290017 ## 7 2015 chl 0201 4 7812764 ## 8 2015 chl 0202 4 25146882 ## 9 2015 chl 0203 4 402815596 ## 10 2015 chl 0204 4 32743522 ## # ... with 1,204 more rows, and 11 more variables: import_value_usd &lt;dbl&gt;, ## # export_rca_4_digits_commodity_code &lt;dbl&gt;, ## # import_rca_4_digits_commodity_code &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Here the export_rca* and import_rca* fields contain the Revealed Comparative Advantage (RCA) of an exported product with respect to all the products with the same number of digits. The definition of RCA is detailed on Open Trade Statistics Documentation. 5.2.2.6 Year - Reporter - Partner The only applicable filter is by year, reporter and partner. # Year - Reporter - Partner (filter by year, reporter and partner) yrp &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrp?y=2015&amp;r=chl&amp;p=arg&quot; )) 5.2.2.7 Year - Commodity The only applicable filter is by year. # Year - Commodity (filter by year) yc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yc?y=2015&quot; )) Let’s explore the first rows of yr: yc ## # A tibble: 1,222 x 21 ## year commodity_code commodity_code_… export_value_usd import_value_usd ## * &lt;int&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 0101 4 3464828975 3464828975 ## 2 2015 0102 4 9358659854 9358659854 ## 3 2015 0103 4 4044523653 4044523653 ## 4 2015 0104 4 2091424321 2091424321 ## 5 2015 0105 4 3061618119 3061618119 ## 6 2015 0106 4 1502720547 1502720547 ## 7 2015 0201 4 22382849228 22382849228 ## 8 2015 0202 4 23538513354 23538513354 ## 9 2015 0203 4 27268259243 27268259243 ## 10 2015 0204 4 7038311887 7038311887 ## # ... with 1,212 more rows, and 16 more variables: ## # pci_4_digits_commodity_code &lt;dbl&gt;, ## # pci_rank_4_digits_commodity_code &lt;int&gt;, ## # pci_rank_4_digits_commodity_code_delta_1_year &lt;int&gt;, ## # pci_rank_4_digits_commodity_code_delta_5_years &lt;int&gt;, ## # top_exporter_iso &lt;chr&gt;, top_exporter_trade_value_usd &lt;dbl&gt;, ## # top_importer_iso &lt;chr&gt;, top_importer_trade_value_usd &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Here some fields deserve an explanation: pci_4_digits_commodity_code: Product Complexity Index (PCI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits commodity codes. pci_6_digits_commodity_code: Similar to the previous field but built by using just six digits commodity codes. pci_rank_4_digits_commodity_code: The rank of a product given its PCI (e.g. the highest PCI obtains the #1) pci_rank_4_digits_commodity_code_delta_1_year: How many places a country increased or decreased with respect to last year 5.2.2.8 Year - Reporter The only applicable filter is by year and reporter. ## Year - Reporter (filter by year and reporter) yr &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yr?y=2015&amp;r=chl&quot; )) Let’s explore the first rows of yr: yr ## # A tibble: 1 x 20 ## year reporter_iso export_value_usd import_value_usd eci_4_digits_co… ## * &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 chl 69696214027 73736894538 -0.221 ## # ... with 15 more variables: eci_rank_4_digits_commodity_code &lt;int&gt;, ## # eci_rank_4_digits_commodity_code_delta_1_year &lt;int&gt;, ## # eci_rank_4_digits_commodity_code_delta_5_years &lt;int&gt;, ## # top_export_commodity_code &lt;chr&gt;, top_export_trade_value_usd &lt;dbl&gt;, ## # top_import_commodity_code &lt;chr&gt;, top_import_trade_value_usd &lt;dbl&gt;, ## # export_value_usd_change_1_year &lt;dbl&gt;, ## # export_value_usd_change_5_years &lt;dbl&gt;, ## # export_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # export_value_usd_percentage_change_5_years &lt;dbl&gt;, ## # import_value_usd_change_1_year &lt;dbl&gt;, ## # import_value_usd_change_5_years &lt;dbl&gt;, ## # import_value_usd_percentage_change_1_year &lt;dbl&gt;, ## # import_value_usd_percentage_change_5_years &lt;dbl&gt; Some fields here require more detail: eci_4_digits_commodity_code: Economic Complexity Index (ECI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits commodity codes. eci_rank_4_digits_commodity_code: The rank of a country given its ECI (e.g. the highest ECI obtains the #1) eci_rank_4_digits_commodity_code_delta_1_year: How many places a country increased or decreased with respect to last year 5.3 R package We also provide an R package that is fully documented here. However, this is how to obtain some of the same data from the last two sections with our R package: library(tradestatistics) data_1962 &lt;- get_data(years = 1962, reporter = &quot;all&quot;, partner = &quot;all&quot;) data_1962 ## # A tibble: 911,002 x 12 ## year reporter_iso partner_iso reporter_fullna… partner_fullnam… ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1962 afg aus Afghanistan Australia ## 2 1962 afg aus Afghanistan Australia ## 3 1962 afg aus Afghanistan Australia ## 4 1962 afg aus Afghanistan Australia ## 5 1962 afg aus Afghanistan Australia ## 6 1962 afg aus Afghanistan Australia ## 7 1962 afg aus Afghanistan Australia ## 8 1962 afg aus Afghanistan Australia ## 9 1962 afg aut Afghanistan Austria ## 10 1962 afg aut Afghanistan Austria ## # ... with 910,992 more rows, and 7 more variables: commodity_code &lt;chr&gt;, ## # commodity_code_length &lt;int&gt;, product_fullname_english &lt;chr&gt;, ## # group_code &lt;chr&gt;, group_name &lt;chr&gt;, import_value_usd &lt;int&gt;, ## # export_value_usd &lt;int&gt; "]
]
