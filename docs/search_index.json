[
["index.html", "Open Trade Statistics Section 1 About 1.1 Project goals 1.2 Code of Conduct 1.3 Data availability 1.4 Sources 1.5 Code 1.6 Contact 1.7 Open Source Sponsorships 1.8 Buy us a coffee", " Open Trade Statistics Pachá (Mauricio Vargas Sepúlveda) 2020-03-10 Section 1 About 1.1 Project goals Open Trade Statistics is an independent project that values reproducible research and provides tidy trade data. We are heavily inspired by R community values and Open Licenses views on freedom. We focus on commodities data and our added value, unlike many other good trade data projects, is that we focus on data processing and reproducibility instead of data visualization. We advocate for openness and collaboration, so our contribution is focused on: Releasing all of our source code on GitHub Releasing snapshots of the software we use Sharing curated data (direct download and API) Besides open data we don’t track users, we don’t want your personal information and we use https to protect your navigation and our service. Our goal is to ease data analysis, promote a reproducibility culture, and do something towards a better internet. 1.2 Code of Conduct Before you proceed to download the data, please read this carefully. No matter your gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion (or lack thereof), or technology choices you are able to use this data for any non-commercial purpose, including academic. In general, our software is released under GNU license and our datasets and contents are released under Creative Commons license. Commercial purposes are strictly out of the boundaries of what you can do with this data according to UN Comtrade dissemination clauses. Except where otherwise noted, content on this site is licensed under the Creative Commons BY-NC 4.0 License. Besides CC-BY-NC, when downloading datasets you also agree to the usage conditions explained both to UN Comtrade Online Usage Agreement. The dashboard and R package are released under GNU General Public License v3.0, which follow the license recommendations from The R Project. 1.3 Data availability We used different trade classifications according to the data availability. Classification Availability HS rev 1992 1992 – 2017 HS rev 1996 1996 – 2017 HS rev 2002 2002 – 2017 HS rev 2007 2007 – 2017 SITC rev 1 1962 – 2017 SITC rev 2 1976 – 2017 These datasets were used all together in order to create a unified data series for the period 1962-2017 with all products classified under HS rev 2007. 1.4 Sources All of the product data shown on the OTS site is classified using either SITC (Standard International Trade Classification) or HS (Harmonized System), the raw data was obtained from UN COMTRADE and its under their authorization that we share claned versions of the original raw datasets. 1.5 Code We made all the scripts available on GitHub. Pull requests and new ideas are always welcome! 1.6 Contact GitHub: tradestatistics Twitter: @opentradestats Email: contact@tradestatistics.io 1.7 Open Source Sponsorships This project is hosted on DigitalOcean. Under their Open Source Sponsorships they are subsidizing 25% of the yearly server costs. Thanks DigitalOcean! If you register with this link, you’ll get free credits to try DigitalOcean and we also get credits for the project: Referral Link https://m.do.co/c/6119f0430dad 1.8 Buy us a coffee If you like this work, buy us a coffee, it shall be used to produce more of it. Thank you for your support! "],
["data-processing.html", "Section 2 Data processing 2.1 Tidy Data 2.2 Filling gaps in our data 2.3 Data cleaning 2.4 GitHub repositories 2.5 Software information 2.6 Hardware information 2.7 Reproducibility notes 2.8 Coding style and performant code 2.9 Note for Windows users", " Section 2 Data processing 2.1 Tidy Data We followed Tidy Data principles exposed in [1] and [2]. Those principles are closely tied to those of relational databases and Codd’s relational algebra. Figure 2.1: Data pipeline 2.2 Filling gaps in our data We use mirrored flows to cover gaps in raw data. Some countries report zero exports for some products, but we can inspect what their trade partners reported. If country A reported zero exports (imports) of product B to (from) country C, then we searched what country C reported of imports (exports) of product B from (to) country A. Exports are reported FOB (free on board) while imports are reported CIF (cost, insurance and freight). When country A sends products to country C that will be registered with a larger value when it arrives to destination because the importer is including cost, insurance and freight that was not registered before shipping. There are different approaches to solve this difficulty, and in particular [3], [4] and [5] discuss this in detail and propose that an 8% CIF/FOB ratio is suitable to discount costs and compare imports and exports. There are some noble and remarkable approaches such as gravitational models. As, to our knowledge at the moment, there is no literature reporting the estimation of a gravity equation for this purpose that returns a satisfactory fitting. Let \\(x_{c,c&#39;,p}\\) represent the exports of country \\(c\\) to country \\(c&#39;\\) in product \\(p\\) and \\(m_{c&#39;,c,p}\\) the imports of country \\(c&#39;\\) from country \\(c\\). Under this notation we defined corrected flows as: \\[\\hat{x}_{c,c&#39;,p} = \\max\\left\\{x_{c,c&#39;,p}, \\frac{m_{c&#39;,c,p}}{1.08}\\right\\}\\] \\[\\hat{m}_{c,c&#39;,p} = \\max\\left\\{x_{c&#39;,c,p}, \\frac{m_{c,c&#39;,p}}{1.08}\\right\\}\\] After symmetrization all observations are rounded to zero decimals. 2.3 Data cleaning You can check the GitHub repository, but here we provide a simplified and commented example that reproduces the exact steps we performed to clean the data. Provided that Comtrade raw data cannot be redistributed, I’ll limit the example to five reporters in the year 1962 (the first year with available data). Let’s define two files for the example: raw_file &lt;- &quot;raw_data_1962_five_reporters.rda&quot; clean_file &lt;- &quot;clean_data_1962_five_reporters.rda&quot; 2.3.1 Required packages library(data.table) library(dplyr) library(stringr) library(purrr) library(janitor) 2.3.2 Custom function to read data fread2 &lt;- function(file, select = NULL, character = NULL, numeric = NULL) { if(str_sub(file, start = -2) == &quot;gz&quot;) { d &lt;- fread( cmd = paste(&quot;zcat&quot;, file), select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } else { d &lt;- fread( input = file, select = select, colClasses = list( character = character, numeric = numeric ) ) %&gt;% as_tibble() %&gt;% clean_names() } return(d) } 2.3.3 CIF-FOB rate, commodity codes length and ISO codes # CIF-FOB rate ------------------------------------------------------------ # See Anderson &amp; van Wincoop, 2004, Hummels, 2006 and Gaulier &amp; Zignago, 2010 about 8% rate consistency cif_fob_rate &lt;- 1.08 # Commodity codes length -------------------------------------------------- J &lt;- 4 # ISO-3 codes ------------------------------------------------------------- load(&quot;../comtrade-codes/01-2-tidy-country-data/country-codes.RData&quot;) country_codes &lt;- country_codes %&gt;% select(iso3_digit_alpha) %&gt;% mutate(iso3_digit_alpha = str_to_lower(iso3_digit_alpha)) %&gt;% filter(!iso3_digit_alpha %in% c(&quot;wld&quot;,&quot;null&quot;)) %&gt;% as_vector() 2.3.4 Read raw data if (!file.exists(raw_file)) { raw_data &lt;- fread2( &quot;../yearly-datasets/01-raw-data/sitc-rev1/gz/type-C_r-ALL_ps-1962_freq-A_px-S1_pub-20050214_fmt-csv_ex-20151113.csv.gz&quot;, select = c(&quot;Year&quot;, &quot;Aggregate Level&quot;, &quot;Trade Flow&quot;, &quot;Reporter ISO&quot;, &quot;Partner ISO&quot;, &quot;Commodity Code&quot;, &quot;Trade Value (US$)&quot;), character = &quot;Commodity Code&quot;, numeric = &quot;Trade Value (US$)&quot; ) %&gt;% filter( reporter_iso == &quot;CHL&quot;, partner_iso %in% c(&quot;ARG&quot;, &quot;BRA&quot;, &quot;PER&quot;) ) save(raw_data, file = raw_file, compress = &quot;xz&quot;) raw_data } else { load(raw_file) raw_data } ## # A tibble: 1,288 x 7 ## year aggregate_level trade_flow reporter_iso partner_iso commodity_code ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1962 3 Import CHL BRA 071 ## 2 1962 3 Import CHL PER 071 ## 3 1962 4 Export CHL PER 2218 ## 4 1962 3 Export CHL ARG 265 ## 5 1962 3 Import CHL BRA 265 ## 6 1962 3 Import CHL PER 265 ## 7 1962 5 Export CHL BRA 29193 ## 8 1962 1 Export CHL ARG 3 ## 9 1962 1 Import CHL BRA 3 ## 10 1962 1 Import CHL PER 3 ## # … with 1,278 more rows, and 1 more variable: trade_value_us &lt;dbl&gt; 2.3.5 Clean data if (!file.exists(clean_file)) { clean_data &lt;- raw_data %&gt;% rename( trade_value_usd = trade_value_us, product_code = commodity_code ) %&gt;% filter(aggregate_level %in% J) %&gt;% filter(trade_flow %in% c(&quot;Export&quot;,&quot;Import&quot;)) %&gt;% filter( !is.na(product_code), product_code != &quot;&quot;, product_code != &quot; &quot; ) %&gt;% mutate( reporter_iso = str_to_lower(reporter_iso), partner_iso = str_to_lower(partner_iso) ) %&gt;% filter( reporter_iso %in% country_codes, partner_iso %in% country_codes ) save(clean_data, file = clean_file, compress = &quot;xz&quot;) clean_data } else { load(clean_file) clean_data } ## # A tibble: 468 x 7 ## year aggregate_level trade_flow reporter_iso partner_iso product_code ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1962 4 Export chl per 2218 ## 2 1962 4 Import chl arg 5417 ## 3 1962 4 Export chl per 6822 ## 4 1962 4 Import chl arg 7141 ## 5 1962 4 Import chl bra 7141 ## 6 1962 4 Import chl arg 7173 ## 7 1962 4 Import chl arg 0452 ## 8 1962 4 Import chl arg 0811 ## 9 1962 4 Import chl arg 2119 ## 10 1962 4 Import chl per 2119 ## # … with 458 more rows, and 1 more variable: trade_value_usd &lt;dbl&gt; 2.3.6 Symmetric (clean) data # Exports data ------------------------------------------------------------ exports &lt;- clean_data %&gt;% filter(trade_flow == &quot;Export&quot;) %&gt;% select(reporter_iso, partner_iso, product_code, trade_value_usd) %&gt;% mutate(trade_value_usd = ceiling(trade_value_usd)) exports_mirrored &lt;- clean_data %&gt;% filter(trade_flow == &quot;Import&quot;) %&gt;% select(reporter_iso, partner_iso, product_code, trade_value_usd) %&gt;% mutate(trade_value_usd = ceiling(trade_value_usd / cif_fob_rate)) # Reporter and Partner must be inverted colnames(exports_mirrored) &lt;- c(&quot;partner_iso&quot;, &quot;reporter_iso&quot;, &quot;product_code&quot;, &quot;trade_value_usd&quot;) exports_conciliated &lt;- exports %&gt;% full_join(exports_mirrored, by = c(&quot;reporter_iso&quot;, &quot;partner_iso&quot;, &quot;product_code&quot;)) %&gt;% rowwise() %&gt;% mutate(trade_value_usd = max(trade_value_usd.x, trade_value_usd.y, na.rm = T)) %&gt;% ungroup() %&gt;% select(reporter_iso, partner_iso, product_code, trade_value_usd) exports_conciliated ## # A tibble: 468 x 4 ## reporter_iso partner_iso product_code trade_value_usd ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 chl per 2218 1575 ## 2 chl per 6822 154203 ## 3 chl arg 2762 5575 ## 4 chl arg 2813 1955476 ## 5 chl arg 6821 2614875 ## 6 chl bra 6821 14049626 ## 7 chl per 8960 675 ## 8 chl arg 9310 74875 ## 9 chl bra 9310 35175 ## 10 chl per 9310 27276 ## # … with 458 more rows 2.4 GitHub repositories Getting and cleaning data from UN COMTRADE (OTS Yearly Data) Scraping data from The Atlas of Economic Complexity (OTS Atlas Data) Product and country codes (OTS Comtrade Codes) R packages library for reproducibility (OTS Packrat Library) 2.5 Software information We used R 3.4.3 and RStudio Desktop 1.1 on Ubuntu Desktop 18.04. We built R from binaries in order to obtain a setup linked with multi-threaded numeric libraries. Our build is linked to OpenBLAS which we used over alternatives such as Intel MKL, BLAS or ATLAS that can also be used. 2.6 Hardware information All the data processing was done by using a DigitalOcean droplet with 6 vCPUs and 32GB in RAM to accelerate data processing. The functions were executed using parallelization on four cores. Please notice that running our scripts with parallelization demands more RAM than the amount you can find on an average laptop. You can always disable parallelization in the scripts or reduce the default number of cores. 2.7 Reproducibility notes To guarantee reproducibility we provide Packrat snapshot and bundles. This prevents changes in syntax, functions or dependencies. Our R installation is isolated from apt-get to avoid any accidental updates that can alter the data pipeline and/or the output. The projects are related to each other. In order to avoid multiple copies of files some projects read files from other projects. For example, OTS Yearly Datasets uses OTS Atlas Data as inpu. The only reproducibility flaw of this project lies in data downloading. Obtaining raw datasets from UN COMTRADE demands an API key that can only be obtained with institutional access that is limited to some universities and institutes. 2.8 Coding style and performant code We used the Tidyverse Style Guide. As cornerstone references for performant code we followed [6] and [7]. 2.9 Note for Windows users If you use Windows the scripts will only use a single core because we used a parallelization that depends on fork system call that is only supported on Unix systems. You can always run the scripts on Windows and the only difference will be that it will use less RAM and processor, and it will be slower to compute. Also, before running the scripts on Windows verify that you installed GNU Utilities beforehand. One easy option is to install Chocolatey first and then install the GNU Utilities by running choco install unxutils on Cmd or Power Shell as administrator. References "],
["the-mathematics-of-economic-complexity.html", "Section 3 The Mathematics of Economic Complexity 3.1 Countries not included in rankings and indicators 3.2 Revealed Comparative Advantage (RCA) 3.3 Smooth Revealed Comparative Advantage (SRCA) 3.4 Country-product matrix 3.5 Diversity and Ubiquity 3.6 Reflections Method 3.7 Economic Complexity Index (ECI) 3.8 Product Complexity Index (PCI) 3.9 Eigenvalues method 3.10 Fitness method 3.11 Product Proximity 3.12 Country Proximity", " Section 3 The Mathematics of Economic Complexity This section is adapted from [8] but it differs at some points. In particular [9] and [10] provide useful technical details. Our changes here consisted in expressing most of the original equations in terms of matrix and vectors. This is because if you use statistical software such as R, it’s more efficient to use linear algebra instead of other operations. 3.1 Countries not included in rankings and indicators The curated data includes all the countries available from UN Comtrade data. However, RCA based calculations such as ECI, PCI and Proximity consider 128 countries studied in [8] according to a selection process that includes both quality and quantity of data. The full list of included countries is available here. 3.2 Revealed Comparative Advantage (RCA) Let \\(\\renewcommand{\\vec}[1]{\\boldsymbol{#1}}\\newcommand{\\R}{\\mathbb{R}} X \\in \\R^{C\\times P}\\) be a matrix with entries \\(x_{c,p}\\) that represents the exports of country \\(c\\) in product \\(p\\), we can express the Revealed Comparative Advantage that country \\(c\\) has in product \\(p\\) as: \\[\\begin{equation} \\tag{3.1} ((X \\oslash (X \\vec{1}_{P\\times 1}))^t \\oslash (X^t \\vec{1}_{C\\times 1} \\oslash (\\vec{1}_{C\\times 1}^t X \\vec{1}_{P\\times 1})))^t \\end{equation}\\] \\(\\oslash\\) denotes element-wise division and \\(t\\) denotes transposition. This is the same as: \\[\\begin{equation} \\tag{3.2} RCA_{c,p} = \\frac{x_{c,p}}{\\sum_c x_{c,p}} / \\frac{\\sum_p x_{c,p}}{\\sum_{c}\\sum_{p} x_{c,p}} \\end{equation}\\] 3.3 Smooth Revealed Comparative Advantage (SRCA) Consider the matrix \\(X\\) defined as in 3.2, use the entries from the matrix to create \\(\\hat{X}\\in \\R^{C\\times P}\\) with entries \\[\\begin{equation} \\tag{3.3} \\hat{x}_{c,p}^{(t)} = \\frac{2x_{c,p}^{(t)} + x_{c,p}^{(t-1)} + x_{c,p}^{(t-2)}}{4} \\end{equation}\\] So that \\(x_{c,p}\\) is averaged over the previous three years by using weights. This is done to smooth changes in exports induced by the price fluctuation of products, and instead of equation (3.2) we used \\[\\begin{equation} \\tag{3.4} SRCA_{c,p}^{(t)} = \\frac{\\hat{x}_{c,p}^{(t)}}{\\sum_c \\hat{x}_{c,p}^{(t)}} / \\frac{\\sum_p \\hat{x}_{c,p}^{(t)}}{\\sum_{c}\\sum_{p} \\hat{x}_{c,p}^{(t)}} \\end{equation}\\] For some years this needs to be altered. As an example, for 1962 the SRCA is the same as RCA and for 1963 the \\(x_{c,p}^{(t-3)}\\) part is omitted and the denominator is changed to 3. 3.4 Country-product matrix Taking \\(\\hat{X}\\) as with entries as in (3.3) we create \\(S \\in \\mathbb{R}^{C\\times P}\\) with entries defined as: \\[\\begin{equation} \\tag{3.5} s_{c,p} = \\begin{cases}1 &amp; \\text{ if } SRCA_{c,p}^{(t)} &gt; 1\\cr 0 &amp; \\text{ otherwise} \\end{cases} \\end{equation}\\] In order to compute some of the equations exposed here we had to reduce \\(S\\) by removing cols and rows where each entry is zero. For some years the number of countries \\(C\\) can be less than 128 (the number of countries originally included in [8]) as it was exposed in 2. The number of products \\(P\\), which can be 1,222 at maximum (under the HS07 trade classification we are using), can also experience a small decrease for a given year. 3.5 Diversity and Ubiquity With \\(S\\) defined as in (3.5), we can measure Diversity and Ubiquity simply by summing over the rows or columns of that matrix. Diversity is defined as: \\[\\vec{k}_c^0 = S\\vec{1}_{P\\times 1}\\] And Ubiquity as: \\[\\vec{k}_p^0 = (\\vec{1}_{C\\times 1}^t S)^t\\] for a single country/product this is the same as \\[k_{c}^{(0)} = \\sum_p s_{c,p} \\\\ k_{p}^{(0)} = \\sum_c s_{c,p}\\] 3.6 Reflections Method Economic Complexity is a measure of how much productive knowledge different countries mobilize. This can be computed as a recursion that involves the average ubiquity of the products that a country exports, and the average diversity of the countries that make those products. Product Complexity is a measure of how much productive knowledge different products mobilize. Its computation is analogous to Economic Complexity, which leads to the recursion: \\[\\begin{equation} \\tag{3.6} k_{c}^{(n)} = \\frac{1}{k_{c}^{(0)}} \\sum_p s_{c,p} k_{p}^{(n-1)} \\end{equation}\\] \\[\\begin{equation} \\tag{3.7} k_{p}^{(n)} = \\frac{1}{k_{p}^{(0)}} \\sum_c s_{c,p} k_{c}^{(n-1)} \\end{equation}\\] Then we insert (3.7) into (3.6) to obtain: \\[\\begin{equation} \\tag{3.8} k_{c}^{(n)} = \\sum_c \\left(\\frac{1}{k_{c}^{(0)}} \\sum_p s_{c,p} s_{c,p} \\frac{1}{k_{p}^{(0)}} s_{c&#39;,p}\\right) k_{c}^{(n-2)} \\end{equation}\\] (3.8) above can be conveniently written as a matrix equation (this formulation takes some ideas from [9] and [10]): \\[\\begin{equation} \\tag{3.9} \\vec{k}_c^{(n)} = \\hat{S}\\vec{k}_c^{(n-2)} \\\\ \\vec{k}_p^{(n)} = \\tilde{S}\\vec{k}_p^{(n-2)} \\end{equation}\\] Where \\[\\begin{equation} \\tag{3.10} \\hat{S} = (S \\oslash K_c^{(0)}) (S^t \\oslash K_p^{(0)}) \\end{equation}\\] and \\[\\begin{equation} \\tag{3.11} \\tilde{S} = (S^t \\oslash D) (S \\oslash U) \\end{equation}\\] \\(\\oslash\\) denotes element-wise division, \\(d_{c,p} = k_c^{(0)}\\) and \\(u_{p,c} = k_p^{(0)}\\). In particular, the interpretation of the scores changes when considering odd or even iteration order \\(n\\), high-order iterations are difficult to interpret, and the process asymptotically converges to a trivial fixed point according to [9]. For the analysis we used \\(n=19\\) to compute \\(k_c\\) and \\(n=20\\) to compute \\(k_p\\). 3.7 Economic Complexity Index (ECI) From the 3.6, we define the Economic Complexity Index (ECI) exactly as in [8], this is: \\[\\begin{equation} \\tag{3.12} ECI_c = \\frac{v_c - \\mu_{v}}{\\sigma_{v}} \\end{equation}\\] Where \\(\\vec{v}\\) is a vector whose coordinates are given by \\(k_{c}^{(19)}\\) where \\(c \\in 1,\\ldots,C\\) \\(\\mu_v = \\sum_c v_c / C\\) (mean of \\(\\vec{v}\\)) \\(\\sigma_v = \\sqrt{\\sum_c (v_c - \\mu_v)^2 / (C - 1)}\\) (standard deviation of \\(\\vec{v}\\)) 3.8 Product Complexity Index (PCI) Similar to the Economic Complexity Index (ECI), we define a Product Complexity Index (PCI) from 3.6. We define PCI as: \\[\\begin{equation} \\tag{3.13} PCI_p = \\frac{w_p - \\mu_{w}}{\\sigma_{w}} \\end{equation}\\] Where \\(\\vec{w}\\) is a vector whose coordinates are given by \\(k_{p}^{(20)}\\) where \\(p \\in 1,\\ldots,P\\) \\(\\mu_w = \\sum_p w_p / P\\) (mean of \\(\\vec{w}\\)) \\(\\sigma_w = \\sqrt{\\sum_p (w_p - \\mu_w)^2 / (P - 1)}\\) (standard deviation of \\(\\vec{w}\\)) 3.9 Eigenvalues method An alternative to obtain the Economic Complexity Index from 3.7 is to take (3.5) and compute the eigenvector associated to the second largest eigenvalue of the matrix: \\[(S \\oslash D) (S^t \\oslash U)\\] Where \\(\\oslash\\) denotes element-wise division, \\(d_{c,p} = k_c^{(0)}\\) and \\(u_{p,c} = k_p^{(0)}\\). Analogously, the Product Complexity Index from 3.8 corresponds to the associated eigenvector of the second largest eigenvalue of the matrix: \\[(S^t \\oslash U) (S \\oslash D)\\] The resulting vectors are standardized by taking \\[ECI_c = \\frac{v_c - \\mu_{v}}{\\sigma_{v}}\\:, PCI_p = \\frac{w_p - \\mu_{w}}{\\sigma_{w}}\\] Where \\(\\mu_x\\) denotes the mean of \\(x\\) and \\(\\sigma_x\\) denotes de standard deviation of \\(x\\). 3.10 Fitness method Another alternative to obtain the Economic Complexity Index from 3.7 and Product Complexity Index from 3.8 is to start with \\(\\vec{k}_{c}^{(0)} = \\vec{1}\\) and \\(\\vec{k}_{p}^{(0)} = \\vec{1}\\). From that initial condition the next steps are to compute: \\[\\begin{equation} \\vec{k}_c^{(n)} = S \\hat{\\vec{k}}_p^{(n-1)}\\\\ \\vec{k}_p^{(n)} = S^t \\vec{\\hat{k}}_c^{(n-1)} \\end{equation}\\] where \\[\\begin{equation} \\hat{k}_c^{(n-1)} = (k_c^{(n-1)})^{-\\gamma}\\\\ \\hat{k}_p^{(n-1)} = (k_p^{(n-1)})^{-1/\\gamma} \\end{equation}\\] for \\(\\gamma &gt; 0\\) (the original version of the Fitness Method uses \\(\\gamma = 1\\)). In addition, each step of the method involves to divide the result of \\(\\vec{k}_c^{(n)}\\) and \\(\\vec{k}_p^{(n)}\\) by its mean, so that the final equations for each step are: \\[\\begin{equation} \\tilde{\\vec{k}}_c^{(n)} = \\vec{k}_c^{(n)} / \\mu_{\\vec{k}_c^{(n)}}\\\\ \\tilde{\\vec{k}}_p^{(n)} = \\vec{k}_p^{(n)} / \\mu_{\\vec{k}_p^{(n)}} \\end{equation}\\] The resulting vectors are standardized by taking \\[ECI_c = \\frac{v_c - \\mu_{v}}{\\sigma_{v}},\\: PCI_p = \\frac{w_p - \\mu_{w}}{\\sigma_{w}}\\] 3.11 Product Proximity For a pair of goods \\(p\\) and \\(p&#39;\\) we define Product Proximity \\(\\Phi \\in \\mathbb{R}^{P\\times P}\\) as: \\[ \\Phi = (S^t S) \\oslash U \\] where \\(\\oslash\\) denotes element-wise division and \\(u_{p,p&#39;} = \\max(k_{p}^{(0)}, k_{p&#39;}^{(0)})\\). In other terms, each entry of \\(\\Phi\\) corresponds to: \\[ \\phi_{p,p&#39;} = \\frac{\\sum_c s_{c,p} s_{c,p&#39;}}{\\max(k_{p}^{(0)}, k_{p&#39;}^{(0)})} \\] 3.12 Country Proximity Similar to 3.12, we define Country Proximity \\(\\Lambda \\in \\mathbb{R}^{C\\times C}\\) as: \\[ \\Lambda = (SS^t) \\oslash D \\] where \\(\\oslash\\) denotes element-wise division and \\(d_{p,p&#39;} = \\max(k_{c}^{(0)}, k_{c&#39;}^{(0)})\\). In other terms, each entry of \\(\\Lambda\\) corresponds to: \\[ \\lambda_{c,c&#39;} = \\frac{\\sum_p s_{c,p} s_{c,p&#39;}}{\\max(k_{c}^{(0)}, k_{c&#39;}^{(0)})} \\] References "],
["accesing-the-data.html", "Section 4 Accesing the data 4.1 Before downloading datasets 4.2 API 4.3 R Package 4.4 Dashboard (beta) 4.5 RDS datasets", " Section 4 Accesing the data 4.1 Before downloading datasets If you are going to download data, you have to read the Code of Conduct first. 4.2 API The advantage of the API over https download is that you can filter what to obtain and also access some additional tables. To obtain exactly the same data as with compressed files, please refer to 4.2.5. If you use R you’ll need jsonlite and dplyr packages. library(jsonlite) These packages are also useful: library(dplyr) library(stringr) 4.2.1 Available tables as_tibble(fromJSON(&quot;https://api.tradestatistics.io/tables&quot;)) ## # A tibble: 12 x 3 ## table description source ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 countries Countries metadata UN Comtrade ## 2 products Product metadata UN Comtrade ## 3 reporters Reporting countries UN Comtrade ## 4 communities Product communities Center for International D… ## 5 product_sh… Product short names The Observatory of Economi… ## 6 country_ra… Ranking of countries Open Trade Statistics ## 7 product_ra… Ranking of products Open Trade Statistics ## 8 yrpc Bilateral trade at product level (Ye… Open Trade Statistics ## 9 yrp Reporter trade at aggregated level (… Open Trade Statistics ## 10 yrc Reporter trade at aggregated level (… Open Trade Statistics ## 11 yr Reporter trade at aggregated level (… Open Trade Statistics ## 12 yc Product trade at aggregated level (Y… Open Trade Statistics 4.2.2 Metadata ## Countries (no filter) rda_countries &lt;- &quot;countries.rda&quot; if (!file.exists(rda_countries)) { countries &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/countries&quot; )) save(countries, file = rda_countries, compress = &quot;xz&quot;) countries } else { load(rda_countries) countries } ## # A tibble: 249 x 6 ## country_iso country_name_en… country_fullnam… continent_id continent ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; ## 1 afg Afghanistan Afghanistan 1 Asia ## 2 alb Albania Albania 2 Europe ## 3 dza Algeria Algeria 3 Africa ## 4 asm American Samoa American Samoa 4 Oceania ## 5 and Andorra Andorra 2 Europe ## 6 ago Angola Angola 3 Africa ## 7 aia Anguilla Anguilla 5 Americas ## 8 atg Antigua and Bar… Antigua and Bar… 5 Americas ## 9 arg Argentina Argentina 5 Americas ## 10 arm Armenia Armenia 1 Asia ## # … with 239 more rows, and 1 more variable: eu28_member &lt;int&gt; ## Products (no filter) rda_products &lt;- &quot;products.rda&quot; if (!file.exists(rda_products)) { products &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/products&quot; )) save(products, file = rda_products, compress = &quot;xz&quot;) products } else { load(rda_products) products } ## # A tibble: 1,320 x 4 ## product_code product_fullname_english group_code group_name ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 0101 Horses, asses, mules and hinnies; li… 01 Animals; live ## 2 0102 Bovine animals; live 01 Animals; live ## 3 0103 Swine; live 01 Animals; live ## 4 0104 Sheep and goats; live 01 Animals; live ## 5 0105 Poultry; live, fowls of the species … 01 Animals; live ## 6 0106 Animals, n.e.c. in chapter 01; live 01 Animals; live ## 7 0201 Meat of bovine animals; fresh or chi… 02 Meat and edibl… ## 8 0202 Meat of bovine animals; frozen 02 Meat and edibl… ## 9 0203 Meat of swine; fresh, chilled or fro… 02 Meat and edibl… ## 10 0204 Meat of sheep or goats; fresh, chill… 02 Meat and edibl… ## # … with 1,310 more rows Please notice that these tables include some aliases. countries includes some meta-codes, c-xx where xx must the first two letters of a continent and all, this is: Alias Meaning c-af Alias for all valid ISO codes in Africa c-am Alias for all valid ISO codes in the Americas c-as Alias for all valid ISO codes in Asia c-eu Alias for all valid ISO codes in Europe c-oc Alias for all valid ISO codes in Oceania all Alias for all valid ISO codes in the World products also includes some meta-codes, xx for the first two digits of a code and those digits are the product group and all, this is: Alias Meaning 01 Alias for all codes in the group Animals; live 02 Alias for all codes in the group Meat and edible meat offal 03 Alias for all codes in the group Fish and crustaceans, molluscs and other aquatic invertebrates 04 Alias for all codes in the group Dairy produce; birds’ eggs; natural honey; edible products of animal origin, not elsewhere specified or included 05 Alias for all codes in the group Animal originated products; not elsewhere specified or included 06 Alias for all codes in the group Trees and other plants, live; bulbs, roots and the like; cut flowers and ornamental foliage 07 Alias for all codes in the group Vegetables and certain roots and tubers; edible 08 Alias for all codes in the group Fruit and nuts, edible; peel of citrus fruit or melons 09 Alias for all codes in the group Coffee, tea, mate and spices 10 Alias for all codes in the group Cereals 11 Alias for all codes in the group Products of the milling industry; malt, starches, inulin, wheat gluten 12 Alias for all codes in the group Oil seeds and oleaginous fruits; miscellaneous grains, seeds and fruit, industrial or medicinal plants; straw and fodder 13 Alias for all codes in the group Lac; gums, resins and other vegetable saps and extracts 14 Alias for all codes in the group Vegetable plaiting materials; vegetable products not elsewhere specified or included 15 Alias for all codes in the group Animal or vegetable fats and oils and their cleavage products; prepared animal fats; animal or vegetable waxes 16 Alias for all codes in the group Meat, fish or crustaceans, molluscs or other aquatic invertebrates; preparations thereof 17 Alias for all codes in the group Sugars and sugar confectionery 18 Alias for all codes in the group Cocoa and cocoa preparations 19 Alias for all codes in the group Preparations of cereals, flour, starch or milk; pastrycooks’ products 20 Alias for all codes in the group Preparations of vegetables, fruit, nuts or other parts of plants 21 Alias for all codes in the group Miscellaneous edible preparations 22 Alias for all codes in the group Beverages, spirits and vinegar 23 Alias for all codes in the group Food industries, residues and wastes thereof; prepared animal fodder 24 Alias for all codes in the group Tobacco and manufactured tobacco substitutes 25 Alias for all codes in the group Salt; sulphur; earths, stone; plastering materials, lime and cement 26 Alias for all codes in the group Ores, slag and ash 27 Alias for all codes in the group Mineral fuels, mineral oils and products of their distillation; bituminous substances; mineral waxes 28 Alias for all codes in the group Inorganic chemicals; organic and inorganic compounds of precious metals; of rare earth metals, of radio-active elements and of isotopes 29 Alias for all codes in the group Organic chemicals 30 Alias for all codes in the group Pharmaceutical products 31 Alias for all codes in the group Fertilizers 32 Alias for all codes in the group Tanning or dyeing extracts; tannins and their derivatives; dyes, pigments and other colouring matter; paints, varnishes; putty, other mastics; inks 33 Alias for all codes in the group Essential oils and resinoids; perfumery, cosmetic or toilet preparations 34 Alias for all codes in the group Soap, organic surface-active agents; washing, lubricating, polishing or scouring preparations; artificial or prepared waxes, candles and similar articles, modelling pastes, dental waxes and dental preparations with a basis of plaster 35 Alias for all codes in the group Albuminoidal substances; modified starches; glues; enzymes 36 Alias for all codes in the group Explosives; pyrotechnic products; matches; pyrophoric alloys; certain combustible preparations 37 Alias for all codes in the group Photographic or cinematographic goods 38 Alias for all codes in the group Chemical products n.e.c. 39 Alias for all codes in the group Plastics and articles thereof 40 Alias for all codes in the group Rubber and articles thereof 41 Alias for all codes in the group Raw hides and skins (other than furskins) and leather 42 Alias for all codes in the group Articles of leather; saddlery and harness; travel goods, handbags and similar containers; articles of animal gut (other than silk-worm gut) 43 Alias for all codes in the group Furskins and artificial fur; manufactures thereof 44 Alias for all codes in the group Wood and articles of wood; wood charcoal 45 Alias for all codes in the group Cork and articles of cork 46 Alias for all codes in the group Manufactures of straw, esparto or other plaiting materials; basketware and wickerwork 47 Alias for all codes in the group Pulp of wood or other fibrous cellulosic material; recovered (waste and scrap) paper or paperboard 48 Alias for all codes in the group Paper and paperboard; articles of paper pulp, of paper or paperboard 49 Alias for all codes in the group Printed books, newspapers, pictures and other products of the printing industry; manuscripts, typescripts and plans 50 Alias for all codes in the group Silk 51 Alias for all codes in the group Wool, fine or coarse animal hair; horsehair yarn and woven fabric 52 Alias for all codes in the group Cotton 53 Alias for all codes in the group Vegetable textile fibres; paper yarn and woven fabrics of paper yarn 54 Alias for all codes in the group Man-made filaments; strip and the like of man-made textile materials 55 Alias for all codes in the group Man-made staple fibres 56 Alias for all codes in the group Wadding, felt and nonwovens, special yarns; twine, cordage, ropes and cables and articles thereof 57 Alias for all codes in the group Carpets and other textile floor coverings 58 Alias for all codes in the group Fabrics; special woven fabrics, tufted textile fabrics, lace, tapestries, trimmings, embroidery 59 Alias for all codes in the group Textile fabrics; impregnated, coated, covered or laminated; textile articles of a kind suitable for industrial use 60 Alias for all codes in the group Fabrics; knitted or crocheted 61 Alias for all codes in the group Apparel and clothing accessories; knitted or crocheted 62 Alias for all codes in the group Apparel and clothing accessories; not knitted or crocheted 63 Alias for all codes in the group Textiles, made up articles; sets; worn clothing and worn textile articles; rags 64 Alias for all codes in the group Footwear; gaiters and the like; parts of such articles 65 Alias for all codes in the group Headgear and parts thereof 66 Alias for all codes in the group Umbrellas, sun umbrellas, walking-sticks, seat sticks, whips, riding crops; and parts thereof 67 Alias for all codes in the group Feathers and down, prepared; and articles made of feather or of down; artificial flowers; articles of human hair 68 Alias for all codes in the group Stone, plaster, cement, asbestos, mica or similar materials; articles thereof 69 Alias for all codes in the group Ceramic products 70 Alias for all codes in the group Glass and glassware 71 Alias for all codes in the group Natural, cultured pearls; precious, semi-precious stones; precious metals, metals clad with precious metal, and articles thereof; imitation jewellery; coin 72 Alias for all codes in the group Iron and steel 73 Alias for all codes in the group Iron or steel articles 74 Alias for all codes in the group Copper and articles thereof 75 Alias for all codes in the group Nickel and articles thereof 76 Alias for all codes in the group Aluminium and articles thereof 78 Alias for all codes in the group Lead and articles thereof 79 Alias for all codes in the group Zinc and articles thereof 80 Alias for all codes in the group Tin; articles thereof 81 Alias for all codes in the group Metals; n.e.c., cermets and articles thereof 82 Alias for all codes in the group Tools, implements, cutlery, spoons and forks, of base metal; parts thereof, of base metal 83 Alias for all codes in the group Metal; miscellaneous products of base metal 84 Alias for all codes in the group Nuclear reactors, boilers, machinery and mechanical appliances; parts thereof 85 Alias for all codes in the group Electrical machinery and equipment and parts thereof; sound recorders and reproducers; television image and sound recorders and reproducers, parts and accessories of such articles 86 Alias for all codes in the group Railway, tramway locomotives, rolling-stock and parts thereof; railway or tramway track fixtures and fittings and parts thereof; mechanical (including electro-mechanical) traffic signalling equipment of all kinds 87 Alias for all codes in the group Vehicles; other than railway or tramway rolling stock, and parts and accessories thereof 88 Alias for all codes in the group Aircraft, spacecraft and parts thereof 89 Alias for all codes in the group Ships, boats and floating structures 90 Alias for all codes in the group Optical, photographic, cinematographic, measuring, checking, medical or surgical instruments and apparatus; parts and accessories 91 Alias for all codes in the group Clocks and watches and parts thereof 92 Alias for all codes in the group Musical instruments; parts and accessories of such articles 93 Alias for all codes in the group Arms and ammunition; parts and accessories thereof 94 Alias for all codes in the group Furniture; bedding, mattresses, mattress supports, cushions and similar stuffed furnishings; lamps and lighting fittings, n.e.c.; illuminated signs, illuminated name-plates and the like; prefabricated buildings 95 Alias for all codes in the group Toys, games and sports requisites; parts and accessories thereof 96 Alias for all codes in the group Miscellaneous manufactured articles 97 Alias for all codes in the group Works of art; collectors’ pieces and antiques 99 Alias for all codes in the group Commodities not specified according to kind all Alias for all codes 4.2.3 API parameters The tables provided withing our API contain at least one of these fields: Year (y) Reporter ISO (r) Partner ISO (p) Product Code (c) The most detailed table is yrpc that contains all bilateral flows at product level. With respect to y you can pass any integer contained in \\([1962,2018]\\). Both r and p accept any valid ISO code or alias contained in the countries table. For example, both chl (valid ISO code) and c-am (continent Americas, an alias) are valid API filtering parameters. c takes any valid product code or alias from the products. For example, both 0101 (valid HS product code) and 01 (valid HS group code) are valid API filtering parameters. By default the API takes c = &quot;all&quot; by default. You can always skip c, but y, r and p are requiered to return data. 4.2.4 Available reporters The only applicable filter is by year. # Available reporters (filter by year) as_tibble(fromJSON( &quot;https://api.tradestatistics.io/reporters?y=2015&quot; )) ## # A tibble: 225 x 1 ## reporter_iso ## &lt;chr&gt; ## 1 zwe ## 2 zmb ## 3 zaf ## 4 yem ## 5 wsm ## 6 wlf ## 7 vut ## 8 vnm ## 9 vgb ## 10 ven ## # … with 215 more rows 4.2.5 YRPC (Year, Reporter, Partner and Product Code) The applicable filters here are year, reporter, partner, product code and (optionally) product code length. # Year - Reporter - Partner - Product Code (filter by year, reporter and partner) ## file to store the query results rda_1962 &lt;- &quot;api_data_1962.rda&quot; ## filter by product code length (parameter `l`) if (!file.exists(rda_1962)) { yrpc_1 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=1962&amp;r=usa&amp;p=all&quot; )) save(yrpc_1, file = rda_1962, compress = &quot;xz&quot;) yrpc_1 } else { load(rda_1962) yrpc_1 } ## # A tibble: 35,346 x 6 ## year reporter_iso partner_iso product_code import_value_usd export_value_usd ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 1962 usa zaf 7502 2758 NA ## 2 1962 usa zaf 7213 76363 NA ## 3 1962 usa zaf 7206 143415 NA ## 4 1962 usa zaf 7201 189295 NA ## 5 1962 usa zaf 7118 6687 NA ## 6 1962 usa zaf 7102 22770831 NA ## 7 1962 usa zaf 5105 268857 NA ## 8 1962 usa zaf 5102 48423 NA ## 9 1962 usa zaf 5101 26275600 NA ## 10 1962 usa zaf 4702 2224566 NA ## # … with 35,336 more rows ## filter by product group (parameter `c`) yrpc_2 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrpc?y=2015&amp;r=chl&amp;p=arg&amp;c=01&quot; )) yrpc_2 ## # A tibble: 2 x 6 ## year reporter_iso partner_iso product_code export_value_usd import_value_usd ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 2015 chl arg 0106 53213 34120 ## 2 2015 chl arg 0101 123800 392190 Some columns requiere an explanation: product_code: HS07 product codes (e.g. according to the table within this package, 0101 stands for “Horses, etc.”) product_code_length: How many digits does product_code contain, this can be useful to filter by depth when using HS codes (HS 6 digits is a more detailed version of HS 4 digits, and therefore you don’t have to sum both or you’ll be counting exports/imports twice) group_code: International categorization of group products defined after product ID group_name: English name corresponding to group_id export_value_usd: Exports measured in nominal United States Dollars (USD) import_value_usd: Imports measured in nominal United States Dollars (USD) export_value_usd_percentage_change_1_year: Nominal increase/decrease in exports measured as percentage with respect to last year export_value_usd_percentage_change_5_years: Nominal increase/decrease in exports measured as percentage with respect to five years ago export_value_usd_change_1_year: Nominal increase/decrease in exports measured in USD with respect to last year export_value_usd_change_5_years: Nominal increase/decrease in exports measured in USD with respect to five years ago 4.2.6 YRC (Year, Reporter and Product Code) The only applicable filter is by year, reporter, product code and (optionally) product code length. # Year - Reporter - Product Code (filter by year and reporter) ## filter by reporter ISO (parameter `r`) yrc_1 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2015&amp;r=chl&quot; )) yrc_1 ## # A tibble: 1,214 x 7 ## year reporter_iso product_code export_value_usd import_value_usd export_rca ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 chl 9999 418275298 3762480583 0.218 ## 2 2015 chl 9706 1707137 672446 0.0559 ## 3 2015 chl 9705 842192 1406771 0.07 ## 4 2015 chl 9704 1000 14911 0.0444 ## 5 2015 chl 9703 494608 3739440 0.0226 ## 6 2015 chl 9702 33049 517013 0.0175 ## 7 2015 chl 9701 1055091 9190143 0.0599 ## 8 2015 chl 9618 376809 5512649 0.141 ## 9 2015 chl 9617 2244928 15290042 0.378 ## 10 2015 chl 9616 32828 4020991 0.0055 ## # … with 1,204 more rows, and 1 more variable: import_rca &lt;dbl&gt; ## filter by reporter alias (also parameter `r`) yrc_2 &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrc?y=2015&amp;r=c-am&quot; )) yrc_2 ## # A tibble: 47,673 x 7 ## year reporter_iso product_code export_value_usd import_value_usd export_rca ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 vgb 8213 15 2279 1.77e-2 ## 2 2015 vgb 9032 17265 104027 1.80e-2 ## 3 2015 vgb 9031 18991 466671 1.13e-2 ## 4 2015 vgb 9030 28455 180127 2.39e-2 ## 5 2015 vgb 9029 15976 1381 4.36e-2 ## 6 2015 vgb 9028 0 116064 NA ## 7 2015 vgb 9027 4870 698770 1.75e-1 ## 8 2015 vgb 9026 41202 548144 9.77e-2 ## 9 2015 vgb 9025 11017 84800 1.10e-1 ## 10 2015 vgb 9024 1 3889 9.52e-6 ## # … with 47,663 more rows, and 1 more variable: import_rca &lt;dbl&gt; Here the export_rca* and import_rca* fields contain the Revealed Comparative Advantage (RCA) of an exported product with respect to all the products with the same number of digits. The definition of RCA is detailed on Open Trade Statistics Documentation. 4.2.7 YRP (Year, Reporter and Partner) The only applicable filter is by year, reporter and partner. # Year - Reporter - Partner (filter by year, reporter and partner) yrp &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yrp?y=2015&amp;r=chl&amp;p=arg&quot; )) 4.2.8 YC (Year and Product Code) The only applicable filter is by year, product and (optionally) product code length. # Year - Product Code (filter by year) yc &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yc?y=2015&amp;c=0101&quot; )) Let’s explore the first rows of yr: yc ## # A tibble: 1 x 14 ## year product_code export_value_usd import_value_usd pci_fitness_met… ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 0101 3480824300 3480824300 0.256 ## # … with 9 more variables: pci_rank_fitness_method &lt;int&gt;, ## # pci_reflections_method &lt;dbl&gt;, pci_rank_reflections_method &lt;int&gt;, ## # pci_eigenvalues_method &lt;dbl&gt;, pci_rank_eigenvalues_method &lt;int&gt;, ## # top_exporter_iso &lt;chr&gt;, top_exporter_trade_value_usd &lt;int&gt;, ## # top_importer_iso &lt;chr&gt;, top_importer_trade_value_usd &lt;int&gt; Here some fields deserve an explanation: pci_4_digits_product_code: Product Complexity Index (PCI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits product codes. pci_6_digits_product_code: Similar to the previous field but built by using just six digits product codes. pci_rank_4_digits_product_code: The rank of a product given its PCI (e.g. the highest PCI obtains the #1) pci_rank_4_digits_product_code_delta_1_year: How many places a country increased or decreased with respect to last year 4.2.8.1 YR (Year and Reporter) The only applicable filter is by year and reporter. ## Year - Reporter (filter by year and reporter) yr &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/yr?y=2015&amp;r=chl&quot; )) Let’s explore the first rows of yr: yr ## # A tibble: 1 x 14 ## year reporter_iso export_value_usd import_value_usd eci_fitness_met… ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2015 chl 69654431602 73744618202 0.472 ## # … with 9 more variables: eci_rank_fitness_method &lt;int&gt;, ## # eci_reflections_method &lt;dbl&gt;, eci_rank_reflections_method &lt;int&gt;, ## # eci_eigenvalues_method &lt;dbl&gt;, eci_rank_eigenvalues_method &lt;int&gt;, ## # top_export_product_code &lt;chr&gt;, top_export_trade_value_usd &lt;dbl&gt;, ## # top_import_product_code &lt;chr&gt;, top_import_trade_value_usd &lt;dbl&gt; Some fields here require more detail: eci_4_digits_product_code: Economic Complexity Index (ECI) which is detailed on Open Trade Statistics Documentation. This index is built by using just four digits product codes. eci_rank_4_digits_product_code: The rank of a country given its ECI (e.g. the highest ECI obtains the #1) eci_rank_4_digits_product_code_delta_1_year: How many places a country increased or decreased with respect to last year 4.2.9 Country rankings The only applicable filter is by year. # Country rankings (filter by year) country_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/country_rankings?y=2015&quot; )) 4.2.10 Product rankings The only applicable filter is by year. # Product rankings (filter by year) product_rankings &lt;- as_tibble(fromJSON( &quot;https://api.tradestatistics.io/product_rankings?y=2015&quot; )) 4.3 R Package To ease API using, we provide an R Package. This package is a part of ROpenSci and its documentation is available on a separate pkgdown site. 4.4 Dashboard (beta) To ease API using, we provide a Shiny Dashboard that is still under improvements. 4.5 RDS datasets Please check the md5sums to verify data integrity after downloading. Year Last updated File size (MB) MD5 sum 1962 2020-02-11 2.63 0710271b2ad39456b1eb535f5d5e9f56 1963 2020-02-11 3.17 152bddc2916d86090da498f92945de74 1964 2020-02-11 3.47 d528349e5505c7763d776b21a1f5f15a 1965 2020-02-11 3.92 db6b5cad4c2c17b7d0b8e1cc6a68d028 1966 2020-02-11 4.17 2dfcf4fa79e8fe3951d4502ca3e7ccf1 1967 2020-02-11 4.33 289e46b050a6a552e8dc18ac9ba4d568 1968 2020-02-11 4.51 55a02f559401d8d59438855d02fad980 1969 2020-02-11 4.77 747810a983548041bf7b255f9c1aabed 1970 2020-02-11 5.29 4e1b4f1d117c20202d514334ef4c4d91 1971 2020-02-11 5.47 ae058dbef525921c1ffe6fca579f019a 1972 2020-02-11 5.75 7d742e516e06a764c464b578a817b121 1973 2020-02-11 6.21 a561dbf7598452dd79b996e6c19ed053 1974 2020-02-11 6.69 6b139d5e9399cf98f776cdb81b713ad5 1975 2020-02-11 6.80 487683a9f033afac988c9f00c966e410 1976 2020-02-11 6.78 48b632a07a3d097400811b0d80ceb566 1977 2020-02-11 7.16 1048fb22908b42c5dc3ebda762286e6a 1978 2020-02-11 7.55 2dcac6cebcb28839c2c7317863746d29 1979 2020-02-11 7.97 bc15d15ac627685e1eea7f4d53642f0d 1980 2020-02-11 8.35 f7af0c5caa489f0f772459eebcf6f46f 1981 2020-02-11 8.42 5a09b82d76cced2043db08bd6077dbf0 1982 2020-02-11 8.32 ee43f099b2263e5048928ec9792dcb20 1983 2020-02-11 8.39 1cc3c5839d91c9ae6186751c09b23e84 1984 2020-02-11 8.37 56577fbc39804dcccf37546c8718fe7b 1985 2020-02-11 8.61 ff48557e8caeef78ca5add4100dd9744 1986 2020-02-11 8.99 74795130828662098ba6c4e002dad054 1987 2020-02-11 9.29 5804b112b6eef00d5ba806a5d305f524 1988 2020-02-11 9.70 115e004f3685c8656cd30905ab8dfefd 1989 2020-02-11 10.19 b29fadadd15d9d0385c96a965c1575bf 1990 2020-02-11 10.62 533b8912d031d899304613b4e7af141c 1991 2020-02-11 10.62 dac5c5dee613a2d793d99614f0e9477b 1992 2020-02-11 10.89 fc7590a189a9b69819fc2583d0e6da3c 1993 2020-02-11 11.55 e23704d41b26e8674034297e54b5a0e7 1994 2020-02-11 12.79 cca7adb027006e6da12afb78f3aa2786 1995 2020-02-11 13.66 48d28b20bd88a58f56d56ac3ef7951d7 1996 2020-02-11 13.13 83f7d600d240546b198fccbb5e118e73 1997 2020-02-11 14.25 5492caac7f67796d7da8cbbe269016d7 1998 2020-02-11 14.79 011c64f6687369e4a663fc094a9a8847 1999 2020-02-11 15.54 799cc174df9e4c95f1bdd05e6e148593 2000 2020-02-11 18.25 ee77cab73284d85dbae53138804bbc51 2001 2020-02-11 18.92 ab25b48877b6d3dd9167f9872823fdf4 2002 2020-02-11 17.90 889147aa362e5aa566a0c796b008c86a 2003 2020-02-11 19.15 f21d81db973122c26863e2def9f287a8 2004 2020-02-11 20.55 8c3dccd426b43556a03e6b3dc37d7674 2005 2020-02-11 21.65 c7263a3b189eb397f8795714c844e4ae 2006 2020-02-11 22.70 0db819dfb53195b4ab4a81ba93c4512b 2007 2020-02-11 21.45 b1e904f2e057cd65be7e4cbaf92fb7d5 2008 2020-02-11 23.21 01d5456efecc2048f1e454997cc5b70b 2009 2020-02-11 23.74 08b37c4359023841a53c46dfec83d5cb 2010 2020-02-11 24.55 ed76c148725cd7bc3014309bf7d87542 2011 2020-02-11 25.32 be3aabb2d2c1730ab143d0d3a35201e3 2012 2020-02-11 25.90 1c791e5a4aef24203939ae8b231ab086 2013 2020-02-11 26.41 7abbc88a788f2fffbe10a6403ed9ee5e 2014 2020-02-11 26.67 760eae713d043fd65623c9b2e6ab1d33 2015 2020-02-11 26.92 81555b1726508ee7676419cf379ad265 2016 2020-02-11 26.70 b316c512d846d763183b3ee964dc9987 2017 2020-02-11 27.47 270270ed38577e600c97f6c140f81573 2018 2020-02-11 26.85 30186ff0d29e785cf5db3c914793b5e0 "],
["references.html", "Section 5 References", " Section 5 References "]
]
